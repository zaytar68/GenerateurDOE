@page "/fiches-techniques"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@using GenerateurDOE.Data
@using Microsoft.EntityFrameworkCore
@using Components
@inject IFicheTechniqueService FicheTechniqueService
@inject ITypeProduitService TypeProduitService
@inject ITypeDocumentImportService TypeDocumentImportService
@inject ILoadingStateService LoadingStateService
@inject ApplicationDbContext Context
@inject IJSRuntime JSRuntime

<PageTitle>Fiches Techniques</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Gestion des Fiches Techniques</h2>
                <button class="btn btn-primary" @onclick="OuvrirModalCreation">
                    <i class="oi oi-plus"></i> Nouvelle Fiche
                </button>
            </div>

            <!-- Barre de recherche et filtres -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <AutoComplete T="FicheTechnique"
                                          Items="fiches"
                                          DisplaySelector="GetFicheDisplayText"
                                          Placeholder="Rechercher par produit, fabricant ou type..."
                                          Value="@rechercheText"
                                          OnItemSelected="OnFicheTechniqueSearchSelected"
                                          OnTextChanged="OnFicheTechniqueSearchChanged"
                                          MinSearchLength="2">
                                <ItemTemplate Context="fiche">
                                    <div>
                                        <strong>@fiche.NomProduit</strong>
                                        <br />
                                        <small class="text-muted">
                                            <i class="oi oi-person me-1"></i>@fiche.NomFabricant
                                            <span class="mx-2">•</span>
                                            <i class="oi oi-tag me-1"></i>@fiche.TypeProduit
                                        </small>
                                        @if (!string.IsNullOrEmpty(fiche.Description))
                                        {
                                            <br />
                                            <small class="text-muted"><i class="oi oi-document me-1"></i>@fiche.Description.Substring(0, Math.Min(50, fiche.Description.Length))@(fiche.Description.Length > 50 ? "..." : "")</small>
                                        }
                                    </div>
                                </ItemTemplate>
                            </AutoComplete>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-outline-secondary" @onclick="ReinitialiserFiltres">
                                <i class="oi oi-x"></i> Effacer
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tableau des fiches -->
            <div class="card">
                <div class="card-body">
                    @if (chargement)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (!fichesFiltrees.Any())
                    {
                        <div class="text-center text-muted">
                            <p>Aucune fiche technique trouvée.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Marque - Produit</th>
                                        <th>Type</th>
                                        <th>PDF</th>
                                        <th>Date Création</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var fiche in fichesFiltrees)
                                    {
                                        <tr class="@(fiche == ficheSelectionnee ? "table-warning" : "")">
                                            <td>
                                                <strong>@fiche.NomFabricant</strong> - @fiche.NomProduit
                                                @if (fiche == ficheSelectionnee)
                                                {
                                                    <span class="badge bg-primary ms-2">Sélectionnée</span>
                                                }
                                            </td>
                                            <td>@fiche.TypeProduit</td>
                                            <td>
                                                <span class="badge bg-info">@fiche.ImportsPDF.Count</span>
                                            </td>
                                            <td>@fiche.DateCreation.ToString("dd/MM/yyyy")</td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-info" @onclick="() => OuvrirModalPDF(fiche)" title="Gérer les PDF">
                                                        <i class="oi oi-document"></i>
                                                    </button>
                                                    <button class="btn btn-outline-primary" @onclick="() => OuvrirModalEdition(fiche)" title="Modifier">
                                                        <i class="oi oi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => OuvrirModalSuppression(fiche)" title="Supprimer">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Création/Édition -->
<div class="modal fade @(afficherModalEdition ? "show d-block" : "")" tabindex="-1" style="@(afficherModalEdition ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <EditForm Model="ficheEnCours" OnValidSubmit="SauvegarderFiche">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title">@(ficheEnCours.Id == 0 ? "Nouvelle" : "Modifier") Fiche Technique</h5>
                    <button type="button" class="btn-close" @onclick="FermerModalEdition"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Nom du Produit *</label>
                                <InputText class="form-control" @bind-Value="ficheEnCours.NomProduit" />
                                <ValidationMessage For="@(() => ficheEnCours.NomProduit)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Nom du Fabricant *</label>
                                <div class="input-group">
                                    <select class="form-select" @bind="ficheEnCours.NomFabricant">
                                        <option value="">-- Sélectionner un fabricant --</option>
                                        @foreach (var fabricant in fabricantsDisponibles)
                                        {
                                            <option value="@fabricant">@fabricant</option>
                                        }
                                    </select>
                                    <button type="button" class="btn btn-outline-primary" @onclick="OuvrirModalNouveauFabricant">
                                        <i class="oi oi-plus"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => ficheEnCours.NomFabricant)" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type de Produit *</label>
                        <div class="input-group">
                            <select class="form-select" @bind="ficheEnCours.TypeProduit">
                                <option value="">-- Sélectionner un type de produit --</option>
                                @foreach (var typeProduit in typesProduits)
                                {
                                    <option value="@typeProduit.Nom">@typeProduit.Nom</option>
                                }
                            </select>
                            <button type="button" class="btn btn-outline-primary" @onclick="OuvrirModalNouveauTypeProduit">
                                <i class="oi oi-plus"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => ficheEnCours.TypeProduit)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="ficheEnCours.Description" />
                        <ValidationMessage For="@(() => ficheEnCours.Description)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="FermerModalEdition">Annuler</button>
                    <button type="submit" class="btn btn-primary" disabled="@sauvegarde">
                        @if (sauvegarde)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Sauvegarder
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal Confirmation Suppression -->
<div class="modal fade @(afficherModalSuppression ? "show d-block" : "")" tabindex="-1" style="@(afficherModalSuppression ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmer la suppression</h5>
                <button type="button" class="btn-close" @onclick="FermerModalSuppression"></button>
            </div>
            <div class="modal-body">
                @if (ficheASupprimer != null)
                {
                    <p>Êtes-vous sûr de vouloir supprimer la fiche technique :</p>
                    <p><strong>@ficheASupprimer.NomProduit</strong> de <strong>@ficheASupprimer.NomFabricant</strong> ?</p>
                    @if (ficheASupprimer.ImportsPDF.Any())
                    {
                        <div class="alert alert-warning">
                            <i class="oi oi-warning"></i>
                            Cette action supprimera également <strong>@ficheASupprimer.ImportsPDF.Count fichier(s) PDF</strong> associé(s).
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="FermerModalSuppression">Annuler</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmerSuppression" disabled="@suppressionEnCours">
                    @if (suppressionEnCours)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Supprimer définitivement
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Gestion des PDF -->
<div class="modal fade @(afficherModalPDF ? "show d-block" : "")" tabindex="-1" style="@(afficherModalPDF ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    Gestion des PDF - @(fichePDFEnCours?.NomProduit)
                </h5>
                <button type="button" class="btn-close" @onclick="FermerModalPDF"></button>
            </div>
            <div class="modal-body">
                
                <!-- Zone d'upload -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="oi oi-cloud-upload"></i> Ajouter des fichiers PDF</h6>
                    </div>
                    <div class="card-body">
                        <div class="upload-zone border border-2 border-dashed p-4 text-center" 
                             style="min-height: 150px; border-color: #dee2e6 !important;">
                            <InputFile OnChange="OnFileSelected" multiple accept=".pdf" class="d-none" id="fileInput" />
                            <label for="fileInput" class="d-block" style="cursor: pointer;">
                                @if (uploadEnCours)
                                {
                                    <div class="spinner-border text-primary mb-3"></div>
                                    <p class="mb-0 text-primary">Upload en cours...</p>
                                }
                                else
                                {
                                    <i class="oi oi-cloud-upload display-4 text-muted mb-3"></i>
                                    <p class="mb-2"><strong>Cliquez ici ou glissez-déposez vos fichiers PDF</strong></p>
                                    <p class="text-muted mb-0">Taille maximum : 10MB par fichier</p>
                                }
                            </label>
                        </div>
                        <small class="text-muted">
                            Seuls les fichiers PDF sont acceptés. Vous pourrez définir le type de document après l'upload.
                        </small>
                    </div>
                </div>

                <!-- Liste des PDF existants -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="oi oi-document"></i> 
                            Documents PDF (@pdfsFiche.Count)
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (chargementPDF)
                        {
                            <div class="text-center">
                                <div class="spinner-border"></div>
                            </div>
                        }
                        else if (!pdfsFiche.Any())
                        {
                            <div class="text-center text-muted py-4">
                                <i class="oi oi-document display-4"></i>
                                <p class="mt-3">Aucun document PDF associé à cette fiche.</p>
                            </div>
                        }
                        else
                        {
                            <div class="row g-3">
                                @foreach (var pdf in pdfsFiche.GroupBy(p => p.Id).Select(g => g.First()).OrderBy(p => p.TypeDocumentImport?.Nom ?? "").ThenBy(p => p.NomFichierOriginal))
                                {
                                    <div class="col-md-6 col-lg-4">
                                        <div class="card h-100 border">
                                            <div class="card-body p-3">
                                                <div class="d-flex align-items-start">
                                                    <div class="flex-shrink-0 me-3">
                                                        <i class="oi oi-file text-danger" style="font-size: 2em;"></i>
                                                    </div>
                                                    <div class="flex-grow-1 min-width-0">
                                                        <h6 class="card-title text-truncate mb-1" title="@pdf.NomFichierOriginal">
                                                            @pdf.NomFichierOriginal
                                                        </h6>
                                                        <div class="mb-2">
                                                            <select class="form-select form-select-sm" @bind="pdf.TypeDocumentImportId">
                                                                @foreach (var typeDocument in typesDocumentsListe)
                                                                {
                                                                    <option value="@typeDocument.Id">@typeDocument.Nom</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <small class="text-muted d-block">
                                                            @FormatTailleFichier(pdf.TailleFichier)
                                                        </small>
                                                        <small class="text-muted d-block">
                                                            @pdf.DateImport.ToString("dd/MM/yyyy HH:mm")
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card-footer p-2">
                                                <div class="d-flex justify-content-between">
                                                    <button class="btn btn-outline-primary btn-sm" 
                                                            @onclick="() => TelechargerPDF(pdf)">
                                                        <i class="oi oi-data-transfer-download"></i> Ouvrir
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" 
                                                            @onclick="() => SupprimerPDF(pdf)">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="FermerModalPDF">
                    Fermer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Nouveau Fabricant -->
<div class="modal fade @(afficherModalNouveauFabricant ? "show d-block" : "")" tabindex="-1" style="@(afficherModalNouveauFabricant ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nouveau Fabricant</h5>
                <button type="button" class="btn-close" @onclick="FermerModalNouveauFabricant"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Nom du fabricant *</label>
                    <input type="text" class="form-control" @bind="nouveauFabricantNom" placeholder="Saisir le nom du fabricant" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="FermerModalNouveauFabricant">Annuler</button>
                <button type="button" class="btn btn-primary" @onclick="AjouterNouveauFabricant" disabled="@(string.IsNullOrWhiteSpace(nouveauFabricantNom))">
                    Ajouter
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Nouveau Type de Produit -->
<div class="modal fade @(afficherModalNouveauTypeProduit ? "show d-block" : "")" tabindex="-1" style="@(afficherModalNouveauTypeProduit ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nouveau Type de Produit</h5>
                <button type="button" class="btn-close" @onclick="FermerModalNouveauTypeProduit"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Nom du type de produit *</label>
                    <input type="text" class="form-control" @bind="nouveauTypeProduitNom" placeholder="Saisir le nom du type" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" rows="2" @bind="nouveauTypeProduitDescription" placeholder="Description optionnelle"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="FermerModalNouveauTypeProduit">Annuler</button>
                <button type="button" class="btn btn-primary" @onclick="AjouterNouveauTypeProduit" disabled="@(string.IsNullOrWhiteSpace(nouveauTypeProduitNom) || creationTypeProduitEnCours)">
                    @if (creationTypeProduitEnCours)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Créer
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<FicheTechnique> fiches = new();
    private List<FicheTechnique> fichesFiltrees = new();
    private List<TypeProduit> typesProduits = new();
    private List<TypeDocumentImport> typesDocumentsListe = new();
    private List<string> fabricantsDisponibles = new();
    
    private FicheTechnique ficheEnCours = new();
    private FicheTechnique? ficheASupprimer;
    
    private bool chargement = true;
    private bool sauvegarde = false;
    private bool suppressionEnCours = false;
    
    private bool afficherModalEdition = false;
    private bool afficherModalSuppression = false;
    private bool afficherModalPDF = false;
    private bool afficherModalNouveauFabricant = false;
    private bool afficherModalNouveauTypeProduit = false;
    
    private string filtreRecherche = string.Empty;
    private string rechercheText = string.Empty;
    private FicheTechnique? ficheSelectionnee;
    
    // Variables pour les nouvelles modales
    private string nouveauFabricantNom = string.Empty;
    private string nouveauTypeProduitNom = string.Empty;
    private string nouveauTypeProduitDescription = string.Empty;
    private bool creationTypeProduitEnCours = false;

    protected override async Task OnInitializedAsync()
    {
        await ChargerDonnees();
    }

    private async Task ChargerDonnees()
    {
        chargement = true;
        try
        {
            fiches = (await FicheTechniqueService.GetAllAsync()).ToList();
            typesProduits = (await TypeProduitService.GetActiveAsync()).ToList();
            typesDocumentsListe = (await TypeDocumentImportService.GetActiveAsync()).ToList();
            fichesFiltrees = fiches.OrderBy(f => f.NomFabricant).ThenBy(f => f.NomProduit).ToList();
            
            // Extraire les fabricants uniques pour l'autocomplétion (gardé pour les formulaires)
            fabricantsDisponibles = fiches
                .Select(f => f.NomFabricant)
                .Where(f => !string.IsNullOrWhiteSpace(f))
                .Distinct()
                .OrderBy(f => f)
                .ToList();
        }
        finally
        {
            chargement = false;
        }
    }

    private void FiltrerFiches()
    {
        fichesFiltrees = fiches.Where(f =>
            string.IsNullOrEmpty(filtreRecherche) ||
            f.NomProduit.Contains(filtreRecherche, StringComparison.OrdinalIgnoreCase) ||
            f.NomFabricant.Contains(filtreRecherche, StringComparison.OrdinalIgnoreCase) ||
            f.TypeProduit.Contains(filtreRecherche, StringComparison.OrdinalIgnoreCase) ||
            (!string.IsNullOrEmpty(f.Description) && f.Description.Contains(filtreRecherche, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private void ReinitialiserFiltres()
    {
        filtreRecherche = string.Empty;
        rechercheText = string.Empty; // Vide le champ AutoComplete
        ficheSelectionnee = null; // Désélectionner la fiche
        fichesFiltrees = fiches.ToList();
        StateHasChanged(); // Force le rafraîchissement du composant AutoComplete
    }

    private void OuvrirModalCreation()
    {
        ficheEnCours = new FicheTechnique();
        afficherModalEdition = true;
    }

    private void OuvrirModalEdition(FicheTechnique fiche)
    {
        ficheEnCours = new FicheTechnique
        {
            Id = fiche.Id,
            NomProduit = fiche.NomProduit,
            NomFabricant = fiche.NomFabricant,
            TypeProduit = fiche.TypeProduit,
            Description = fiche.Description
        };
        afficherModalEdition = true;
    }

    private void FermerModalEdition()
    {
        afficherModalEdition = false;
        ficheEnCours = new FicheTechnique();
    }

    private async Task SauvegarderFiche()
    {
        sauvegarde = true;
        try
        {
            if (ficheEnCours.Id == 0)
            {
                await FicheTechniqueService.CreateAsync(ficheEnCours);
            }
            else
            {
                await FicheTechniqueService.UpdateAsync(ficheEnCours);
            }

            await ChargerDonnees();
            FermerModalEdition();
            FiltrerFiches();
        }
        finally
        {
            sauvegarde = false;
        }
    }

    private void OuvrirModalSuppression(FicheTechnique fiche)
    {
        ficheASupprimer = fiche;
        afficherModalSuppression = true;
    }

    private void FermerModalSuppression()
    {
        afficherModalSuppression = false;
        ficheASupprimer = null;
    }

    private async Task ConfirmerSuppression()
    {
        if (ficheASupprimer == null) return;

        suppressionEnCours = true;
        try
        {
            await FicheTechniqueService.DeleteAsync(ficheASupprimer.Id);
            await ChargerDonnees();
            FermerModalSuppression();
            FiltrerFiches();
        }
        finally
        {
            suppressionEnCours = false;
        }
    }

    private FicheTechnique? fichePDFEnCours;
    private List<ImportPDF> pdfsFiche = new();
    private bool chargementPDF = false;
    private bool uploadEnCours = false;

    private void OuvrirModalPDF(FicheTechnique fiche)
    {
        fichePDFEnCours = fiche;
        // ✅ CORRECTION DOUBLONS FINALE: Éliminer les doublons par ID dès l'ouverture
        pdfsFiche = fiche.ImportsPDF?.GroupBy(p => p.Id).Select(g => g.First()).ToList() ?? new List<ImportPDF>();
        afficherModalPDF = true;
    }

    private void FermerModalPDF()
    {
        afficherModalPDF = false;
        fichePDFEnCours = null;
        pdfsFiche.Clear();
    }

    private async Task SupprimerPDF(ImportPDF pdf)
    {
        try
        {
            await FicheTechniqueService.RemovePDFAsync(pdf.Id);

            // ✅ CORRECTION DOUBLONS: Une seule source de vérité pour la suppression avec déduplication
            // 1. Mettre à jour la fiche dans la liste principale
            var ficheAMettreAJour = fiches.FirstOrDefault(f => f.Id == fichePDFEnCours?.Id);
            if (ficheAMettreAJour != null)
            {
                var pdfASupprimer = ficheAMettreAJour.ImportsPDF.FirstOrDefault(p => p.Id == pdf.Id);
                if (pdfASupprimer != null)
                {
                    ficheAMettreAJour.ImportsPDF.Remove(pdfASupprimer);
                    // 2. Recréer la liste locale depuis la source mise à jour AVEC déduplication
                    pdfsFiche = ficheAMettreAJour.ImportsPDF.GroupBy(p => p.Id).Select(g => g.First()).ToList();
                }
            }
            else
            {
                // Fallback si la fiche n'est pas trouvée
                pdfsFiche.Remove(pdf);
            }

            FiltrerFiches();
        }
        catch (Exception ex)
        {
            // TODO: Afficher un toast ou modal d'erreur
            await JSRuntime.InvokeVoidAsync("console.error", $"Erreur lors de la suppression du PDF: {ex.Message}");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (fichePDFEnCours == null) return;

        uploadEnCours = true;
        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                if (file.ContentType == "application/pdf" && file.Size <= 10 * 1024 * 1024) // 10MB max
                {
                    try
                    {
                        using var stream = file.OpenReadStream(10 * 1024 * 1024);
                        var cheminFichier = await FicheTechniqueService.SavePDFFileAsync(stream, file.Name);
                        
                        // Utiliser le premier type de document disponible par défaut
                        var typeParDefaut = typesDocumentsListe.FirstOrDefault();
                        
                        var nouveauPDF = new ImportPDF
                        {
                            CheminFichier = cheminFichier,
                            NomFichierOriginal = file.Name,
                            TypeDocumentImportId = typeParDefaut?.Id ?? 1,
                            TailleFichier = file.Size
                        };

                        var pdfCree = await FicheTechniqueService.AddPDFAsync(fichePDFEnCours.Id, nouveauPDF);

                        // ✅ CORRECTION DOUBLONS PDF FINALE: Une seule source de vérité avec déduplication
                        // 1. Mettre à jour la fiche dans la liste principale
                        var ficheAMettreAJour = fiches.FirstOrDefault(f => f.Id == fichePDFEnCours.Id);
                        if (ficheAMettreAJour != null)
                        {
                            ficheAMettreAJour.ImportsPDF.Add(pdfCree);
                            // 2. Recréer la liste locale depuis la source mise à jour AVEC déduplication
                            pdfsFiche = ficheAMettreAJour.ImportsPDF.GroupBy(p => p.Id).Select(g => g.First()).ToList();
                        }
                        else
                        {
                            // Fallback si la fiche n'est pas trouvée
                            pdfsFiche.Add(pdfCree);
                        }
                        
                        await JSRuntime.InvokeVoidAsync("console.log", $"PDF sauvegardé avec succès: {file.Name} -> {cheminFichier}");
                    }
                    catch (Exception ex)
                    {
                        await JSRuntime.InvokeVoidAsync("console.error", $"Erreur lors du téléchargement de {file.Name}: {ex.Message}");
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.warn", $"Fichier ignoré - {file.Name}: Type={file.ContentType}, Taille={file.Size} bytes");
                }
            }
            
            FiltrerFiches();
        }
        finally
        {
            uploadEnCours = false;
        }
    }

    private void ModifierTypePDF(ImportPDF pdf)
    {
        // La valeur est déjà mise à jour par @bind
        // Ici on peut ajouter une logique de sauvegarde si nécessaire
    }

    private async Task TelechargerPDF(ImportPDF pdf)
    {
        // Ouvrir le PDF dans un nouvel onglet/fenêtre
        await JSRuntime.InvokeVoidAsync("open", $"api/files/{pdf.Id}", "_blank");
    }


    private string FormatTailleFichier(long taille)
    {
        if (taille < 1024) return $"{taille} B";
        if (taille < 1024 * 1024) return $"{taille / 1024:F1} KB";
        if (taille < 1024 * 1024 * 1024) return $"{taille / (1024 * 1024):F1} MB";
        return $"{taille / (1024 * 1024 * 1024):F1} GB";
    }

    // Méthodes pour l'autocomplétion (conservées pour les formulaires de création/édition)

    // Nouvelles méthodes pour les modales d'ajout

    private void OuvrirModalNouveauFabricant()
    {
        nouveauFabricantNom = string.Empty;
        afficherModalNouveauFabricant = true;
    }

    private void FermerModalNouveauFabricant()
    {
        afficherModalNouveauFabricant = false;
        nouveauFabricantNom = string.Empty;
    }

    private void AjouterNouveauFabricant()
    {
        if (string.IsNullOrWhiteSpace(nouveauFabricantNom))
            return;

        if (!fabricantsDisponibles.Contains(nouveauFabricantNom))
        {
            fabricantsDisponibles.Add(nouveauFabricantNom);
            fabricantsDisponibles.Sort();
        }

        ficheEnCours.NomFabricant = nouveauFabricantNom;
        FermerModalNouveauFabricant();
        StateHasChanged();
    }

    private void OuvrirModalNouveauTypeProduit()
    {
        nouveauTypeProduitNom = string.Empty;
        nouveauTypeProduitDescription = string.Empty;
        afficherModalNouveauTypeProduit = true;
    }

    private void FermerModalNouveauTypeProduit()
    {
        afficherModalNouveauTypeProduit = false;
        nouveauTypeProduitNom = string.Empty;
        nouveauTypeProduitDescription = string.Empty;
        creationTypeProduitEnCours = false;
    }

    private async Task AjouterNouveauTypeProduit()
    {
        if (string.IsNullOrWhiteSpace(nouveauTypeProduitNom))
            return;

        creationTypeProduitEnCours = true;
        try
        {
            // Vérifier si le type existe déjà
            if (typesProduits.Any(t => t.Nom.Equals(nouveauTypeProduitNom, StringComparison.OrdinalIgnoreCase)))
            {
                ficheEnCours.TypeProduit = nouveauTypeProduitNom;
                FermerModalNouveauTypeProduit();
                return;
            }

            // Créer un nouveau type de produit
            var nouveauTypeProduit = new TypeProduit
            {
                Nom = nouveauTypeProduitNom,
                Description = string.IsNullOrWhiteSpace(nouveauTypeProduitDescription) ? 
                    $"Type créé automatiquement" : nouveauTypeProduitDescription,
                IsActive = true
            };

            var typeCree = await TypeProduitService.CreateAsync(nouveauTypeProduit);
            
            // Ajouter à la liste locale
            typesProduits.Add(typeCree);
            typesProduits.Sort((a, b) => a.Nom.CompareTo(b.Nom));
            
            // Assigner à la fiche en cours
            ficheEnCours.TypeProduit = typeCree.Nom;
            
            FermerModalNouveauTypeProduit();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Erreur lors de la création du type de produit: {ex.Message}");
            // En cas d'erreur, utiliser quand même le texte saisi
            ficheEnCours.TypeProduit = nouveauTypeProduitNom;
            FermerModalNouveauTypeProduit();
        }
        finally
        {
            creationTypeProduitEnCours = false;
        }
    }

    private string? GetValidationMessage(System.Linq.Expressions.Expression<Func<string>> accessor)
    {
        // Cette méthode pourrait être améliorée pour retourner les messages de validation
        // Pour l'instant, on retourne null pour simplifier
        return null;
    }

    // Méthode helper pour l'affichage
    private string GetFicheDisplayText(FicheTechnique fiche)
    {
        return $"{fiche.NomProduit} - {fiche.NomFabricant}";
    }

    // Méthodes pour la recherche de fiches techniques
    private void OnFicheTechniqueSearchSelected(FicheTechnique fiche)
    {
        ficheSelectionnee = fiche;
        // Conserver le filtrage actuel au lieu de montrer seulement la fiche sélectionnée
        // Le filtrage est maintenu par le texte de recherche existant
    }

    private void OnFicheTechniqueSearchChanged(string searchText)
    {
        filtreRecherche = searchText;
        rechercheText = searchText; // Synchroniser la variable de contrôle
        
        if (string.IsNullOrWhiteSpace(searchText) || searchText.Length < 2)
        {
            // Si le texte est vide ou trop court, afficher toutes les fiches (ou appliquer les autres filtres)
            FiltrerFiches();
            ficheSelectionnee = null;
        }
        else
        {
            // Filtrer en temps réel basé sur la recherche textuelle unifiée
            fichesFiltrees = fiches.Where(f =>
                f.NomProduit.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                f.NomFabricant.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                f.TypeProduit.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(f.Description) && f.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
        
        // Force le rafraîchissement de l'affichage
        StateHasChanged();
    }

}