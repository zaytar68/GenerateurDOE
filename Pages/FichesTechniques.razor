@page "/fiches-techniques"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@using GenerateurDOE.Data
@using Microsoft.EntityFrameworkCore
@inject IFicheTechniqueService FicheTechniqueService
@inject ApplicationDbContext Context
@inject IJSRuntime JSRuntime

<PageTitle>Fiches Techniques</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Gestion des Fiches Techniques</h2>
                <button class="btn btn-primary" @onclick="OuvrirModalCreation">
                    <i class="oi oi-plus"></i> Nouvelle Fiche
                </button>
            </div>

            <!-- Barre de recherche et filtres -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <input class="form-control" type="text" placeholder="Rechercher..." @bind="filtreRecherche" @onkeyup="FiltrerFiches" />
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="filtreChantierId" @bind:after="FiltrerFiches">
                                <option value="">Tous les chantiers</option>
                                @foreach (var chantier in chantiers)
                                {
                                    <option value="@chantier.Id">@chantier.NomProjet</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <input class="form-control" type="text" placeholder="Filtrer par fabricant..." @bind="filtreFabricant" @onkeyup="FiltrerFiches" />
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary" @onclick="ReinitialiserFiltres">
                                <i class="oi oi-x"></i> Effacer
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tableau des fiches -->
            <div class="card">
                <div class="card-body">
                    @if (chargement)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else if (!fichesFiltrees.Any())
                    {
                        <div class="text-center text-muted">
                            <p>Aucune fiche technique trouvée.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Nom Produit</th>
                                        <th>Fabricant</th>
                                        <th>Type</th>
                                        <th>Chantier</th>
                                        <th>PDF</th>
                                        <th>Date Création</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var fiche in fichesFiltrees)
                                    {
                                        <tr>
                                            <td><strong>@fiche.NomProduit</strong></td>
                                            <td>@fiche.NomFabricant</td>
                                            <td>@fiche.TypeProduit</td>
                                            <td>@GetChantiersUtilisation(fiche)</td>
                                            <td>
                                                <span class="badge bg-info">@fiche.ImportsPDF.Count</span>
                                            </td>
                                            <td>@fiche.DateCreation.ToString("dd/MM/yyyy")</td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-info" @onclick="() => OuvrirModalPDF(fiche)" title="Gérer les PDF">
                                                        <i class="oi oi-document"></i>
                                                    </button>
                                                    <button class="btn btn-outline-primary" @onclick="() => OuvrirModalEdition(fiche)" title="Modifier">
                                                        <i class="oi oi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => OuvrirModalSuppression(fiche)" title="Supprimer">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Création/Édition -->
<div class="modal fade @(afficherModalEdition ? "show d-block" : "")" tabindex="-1" style="@(afficherModalEdition ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <EditForm Model="ficheEnCours" OnValidSubmit="SauvegarderFiche">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title">@(ficheEnCours.Id == 0 ? "Nouvelle" : "Modifier") Fiche Technique</h5>
                    <button type="button" class="btn-close" @onclick="FermerModalEdition"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Nom du Produit *</label>
                                <InputText class="form-control" @bind-Value="ficheEnCours.NomProduit" />
                                <ValidationMessage For="@(() => ficheEnCours.NomProduit)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Nom du Fabricant *</label>
                                <InputText class="form-control" @bind-Value="ficheEnCours.NomFabricant" />
                                <ValidationMessage For="@(() => ficheEnCours.NomFabricant)" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type de Produit *</label>
                        <InputText class="form-control" @bind-Value="ficheEnCours.TypeProduit" />
                        <ValidationMessage For="@(() => ficheEnCours.TypeProduit)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="ficheEnCours.Description" />
                        <ValidationMessage For="@(() => ficheEnCours.Description)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="FermerModalEdition">Annuler</button>
                    <button type="submit" class="btn btn-primary" disabled="@sauvegarde">
                        @if (sauvegarde)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Sauvegarder
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal Confirmation Suppression -->
<div class="modal fade @(afficherModalSuppression ? "show d-block" : "")" tabindex="-1" style="@(afficherModalSuppression ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmer la suppression</h5>
                <button type="button" class="btn-close" @onclick="FermerModalSuppression"></button>
            </div>
            <div class="modal-body">
                @if (ficheASupprimer != null)
                {
                    <p>Êtes-vous sûr de vouloir supprimer la fiche technique :</p>
                    <p><strong>@ficheASupprimer.NomProduit</strong> de <strong>@ficheASupprimer.NomFabricant</strong> ?</p>
                    @if (ficheASupprimer.ImportsPDF.Any())
                    {
                        <div class="alert alert-warning">
                            <i class="oi oi-warning"></i>
                            Cette action supprimera également <strong>@ficheASupprimer.ImportsPDF.Count fichier(s) PDF</strong> associé(s).
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="FermerModalSuppression">Annuler</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmerSuppression" disabled="@suppressionEnCours">
                    @if (suppressionEnCours)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Supprimer définitivement
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Gestion des PDF -->
<div class="modal fade @(afficherModalPDF ? "show d-block" : "")" tabindex="-1" style="@(afficherModalPDF ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    Gestion des PDF - @(fichePDFEnCours?.NomProduit)
                </h5>
                <button type="button" class="btn-close" @onclick="FermerModalPDF"></button>
            </div>
            <div class="modal-body">
                
                <!-- Zone d'upload -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="oi oi-cloud-upload"></i> Ajouter des fichiers PDF</h6>
                    </div>
                    <div class="card-body">
                        <div class="upload-zone border border-2 border-dashed p-4 text-center" 
                             style="min-height: 150px; border-color: #dee2e6 !important;">
                            <InputFile OnChange="OnFileSelected" multiple accept=".pdf" class="d-none" id="fileInput" />
                            <label for="fileInput" class="d-block" style="cursor: pointer;">
                                @if (uploadEnCours)
                                {
                                    <div class="spinner-border text-primary mb-3"></div>
                                    <p class="mb-0 text-primary">Upload en cours...</p>
                                }
                                else
                                {
                                    <i class="oi oi-cloud-upload display-4 text-muted mb-3"></i>
                                    <p class="mb-2"><strong>Cliquez ici ou glissez-déposez vos fichiers PDF</strong></p>
                                    <p class="text-muted mb-0">Taille maximum : 10MB par fichier</p>
                                }
                            </label>
                        </div>
                        <small class="text-muted">
                            Seuls les fichiers PDF sont acceptés. Vous pourrez définir le type de document après l'upload.
                        </small>
                    </div>
                </div>

                <!-- Liste des PDF existants -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="oi oi-document"></i> 
                            Documents PDF (@pdfsFiche.Count)
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (chargementPDF)
                        {
                            <div class="text-center">
                                <div class="spinner-border"></div>
                            </div>
                        }
                        else if (!pdfsFiche.Any())
                        {
                            <div class="text-center text-muted py-4">
                                <i class="oi oi-document display-4"></i>
                                <p class="mt-3">Aucun document PDF associé à cette fiche.</p>
                            </div>
                        }
                        else
                        {
                            <div class="row g-3">
                                @foreach (var pdf in pdfsFiche.OrderBy(p => p.TypeDocument).ThenBy(p => p.NomFichierOriginal))
                                {
                                    <div class="col-md-6 col-lg-4">
                                        <div class="card h-100 border">
                                            <div class="card-body p-3">
                                                <div class="d-flex align-items-start">
                                                    <div class="flex-shrink-0 me-3">
                                                        <i class="oi oi-file text-danger" style="font-size: 2em;"></i>
                                                    </div>
                                                    <div class="flex-grow-1 min-width-0">
                                                        <h6 class="card-title text-truncate mb-1" title="@pdf.NomFichierOriginal">
                                                            @pdf.NomFichierOriginal
                                                        </h6>
                                                        <div class="mb-2">
                                                            <select class="form-select form-select-sm" @bind="pdf.TypeDocument" 
                                                                    @bind:after="@(() => ModifierTypePDF(pdf))">
                                                                @foreach (TypeDocument type in Enum.GetValues<TypeDocument>())
                                                                {
                                                                    <option value="@type">@GetNomTypeDocument(type)</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <small class="text-muted d-block">
                                                            @FormatTailleFichier(pdf.TailleFichier)
                                                        </small>
                                                        <small class="text-muted d-block">
                                                            @pdf.DateImport.ToString("dd/MM/yyyy HH:mm")
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card-footer p-2">
                                                <div class="d-flex justify-content-between">
                                                    <button class="btn btn-outline-primary btn-sm" 
                                                            @onclick="() => TelechargerPDF(pdf)">
                                                        <i class="oi oi-data-transfer-download"></i> Ouvrir
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" 
                                                            @onclick="() => SupprimerPDF(pdf)">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="FermerModalPDF">
                    Fermer
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<FicheTechnique> fiches = new();
    private List<FicheTechnique> fichesFiltrees = new();
    private List<Chantier> chantiers = new();
    
    private FicheTechnique ficheEnCours = new();
    private FicheTechnique? ficheASupprimer;
    
    private bool chargement = true;
    private bool sauvegarde = false;
    private bool suppressionEnCours = false;
    
    private bool afficherModalEdition = false;
    private bool afficherModalSuppression = false;
    private bool afficherModalPDF = false;
    
    private string filtreRecherche = string.Empty;
    private string filtreFabricant = string.Empty;
    private string filtreChantierId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ChargerDonnees();
    }

    private async Task ChargerDonnees()
    {
        chargement = true;
        try
        {
            fiches = (await FicheTechniqueService.GetAllAsync()).ToList();
            chantiers = await Context.Chantiers
                .Include(c => c.FichesTechniques)
                .OrderBy(c => c.NomProjet)
                .ToListAsync();
            fichesFiltrees = fiches.ToList();
        }
        finally
        {
            chargement = false;
        }
    }

    private void FiltrerFiches()
    {
        fichesFiltrees = fiches.Where(f =>
            (string.IsNullOrEmpty(filtreRecherche) ||
             f.NomProduit.Contains(filtreRecherche, StringComparison.OrdinalIgnoreCase) ||
             f.TypeProduit.Contains(filtreRecherche, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtreFabricant) ||
             f.NomFabricant.Contains(filtreFabricant, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtreChantierId) ||
             (f.ChantierId?.ToString() == filtreChantierId))
        ).ToList();
    }

    private void ReinitialiserFiltres()
    {
        filtreRecherche = string.Empty;
        filtreFabricant = string.Empty;
        filtreChantierId = string.Empty;
        fichesFiltrees = fiches.ToList();
    }

    private void OuvrirModalCreation()
    {
        ficheEnCours = new FicheTechnique();
        afficherModalEdition = true;
    }

    private void OuvrirModalEdition(FicheTechnique fiche)
    {
        ficheEnCours = new FicheTechnique
        {
            Id = fiche.Id,
            NomProduit = fiche.NomProduit,
            NomFabricant = fiche.NomFabricant,
            TypeProduit = fiche.TypeProduit,
            Description = fiche.Description
        };
        afficherModalEdition = true;
    }

    private void FermerModalEdition()
    {
        afficherModalEdition = false;
        ficheEnCours = new FicheTechnique();
    }

    private async Task SauvegarderFiche()
    {
        sauvegarde = true;
        try
        {
            if (ficheEnCours.Id == 0)
            {
                await FicheTechniqueService.CreateAsync(ficheEnCours);
            }
            else
            {
                await FicheTechniqueService.UpdateAsync(ficheEnCours);
            }

            await ChargerDonnees();
            FermerModalEdition();
            FiltrerFiches();
        }
        finally
        {
            sauvegarde = false;
        }
    }

    private void OuvrirModalSuppression(FicheTechnique fiche)
    {
        ficheASupprimer = fiche;
        afficherModalSuppression = true;
    }

    private void FermerModalSuppression()
    {
        afficherModalSuppression = false;
        ficheASupprimer = null;
    }

    private async Task ConfirmerSuppression()
    {
        if (ficheASupprimer == null) return;

        suppressionEnCours = true;
        try
        {
            await FicheTechniqueService.DeleteAsync(ficheASupprimer.Id);
            await ChargerDonnees();
            FermerModalSuppression();
            FiltrerFiches();
        }
        finally
        {
            suppressionEnCours = false;
        }
    }

    private FicheTechnique? fichePDFEnCours;
    private List<ImportPDF> pdfsFiche = new();
    private bool chargementPDF = false;
    private bool uploadEnCours = false;

    private void OuvrirModalPDF(FicheTechnique fiche)
    {
        fichePDFEnCours = fiche;
        pdfsFiche = fiche.ImportsPDF.ToList();
        afficherModalPDF = true;
    }

    private void FermerModalPDF()
    {
        afficherModalPDF = false;
        fichePDFEnCours = null;
        pdfsFiche.Clear();
    }

    private async Task SupprimerPDF(ImportPDF pdf)
    {
        try
        {
            await FicheTechniqueService.RemovePDFAsync(pdf.Id);
            pdfsFiche.Remove(pdf);
            
            // Mettre à jour la fiche dans la liste principale
            var ficheAMettreAJour = fiches.FirstOrDefault(f => f.Id == fichePDFEnCours?.Id);
            if (ficheAMettreAJour != null)
            {
                var pdfASupprimer = ficheAMettreAJour.ImportsPDF.FirstOrDefault(p => p.Id == pdf.Id);
                if (pdfASupprimer != null)
                {
                    ficheAMettreAJour.ImportsPDF.Remove(pdfASupprimer);
                }
            }
            
            FiltrerFiches();
        }
        catch (Exception)
        {
            // TODO: Afficher message d'erreur
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (fichePDFEnCours == null) return;

        uploadEnCours = true;
        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                if (file.ContentType == "application/pdf" && file.Size <= 10 * 1024 * 1024) // 10MB max
                {
                    using var stream = file.OpenReadStream(10 * 1024 * 1024);
                    var cheminFichier = await FicheTechniqueService.SavePDFFileAsync(stream, file.Name);
                    
                    var nouveauPDF = new ImportPDF
                    {
                        CheminFichier = cheminFichier,
                        NomFichierOriginal = file.Name,
                        TypeDocument = TypeDocument.FicheTechnique,
                        TailleFichier = file.Size
                    };

                    var pdfCree = await FicheTechniqueService.AddPDFAsync(fichePDFEnCours.Id, nouveauPDF);
                    pdfsFiche.Add(pdfCree);
                    
                    // Mettre à jour la fiche dans la liste principale
                    var ficheAMettreAJour = fiches.FirstOrDefault(f => f.Id == fichePDFEnCours.Id);
                    ficheAMettreAJour?.ImportsPDF.Add(pdfCree);
                }
            }
            
            FiltrerFiches();
        }
        finally
        {
            uploadEnCours = false;
        }
    }

    private void ModifierTypePDF(ImportPDF pdf)
    {
        // La valeur est déjà mise à jour par @bind
        // Ici on peut ajouter une logique de sauvegarde si nécessaire
    }

    private async Task TelechargerPDF(ImportPDF pdf)
    {
        // Ouvrir le PDF dans un nouvel onglet/fenêtre
        await JSRuntime.InvokeVoidAsync("open", $"api/files/{pdf.Id}", "_blank");
    }

    private string GetNomTypeDocument(TypeDocument type)
    {
        return type switch
        {
            TypeDocument.FicheTechnique => "Fiche Technique",
            TypeDocument.Nuancier => "Nuancier",
            TypeDocument.Brochure => "Brochure",
            TypeDocument.ClassFeu => "Classement Feu",
            TypeDocument.ClassUPEC => "Classement UPEC",
            TypeDocument.Autre => "Autre",
            _ => type.ToString()
        };
    }

    private string FormatTailleFichier(long taille)
    {
        if (taille < 1024) return $"{taille} B";
        if (taille < 1024 * 1024) return $"{taille / 1024:F1} KB";
        if (taille < 1024 * 1024 * 1024) return $"{taille / (1024 * 1024):F1} MB";
        return $"{taille / (1024 * 1024 * 1024):F1} GB";
    }

    private string GetChantiersUtilisation(FicheTechnique fiche)
    {
        var chantiersUtilises = chantiers
            .Where(c => c.FichesTechniques.Any(f => f.Id == fiche.Id))
            .Select(c => c.NomProjet)
            .ToList();

        if (!chantiersUtilises.Any())
        {
            return "Non utilisé";
        }

        if (chantiersUtilises.Count == 1)
        {
            return chantiersUtilises.First();
        }

        return $"{chantiersUtilises.First()} (+{chantiersUtilises.Count - 1} autre{(chantiersUtilises.Count > 2 ? "s" : "")})";
    }
}