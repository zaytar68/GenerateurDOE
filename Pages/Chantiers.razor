@page "/chantiers"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@using GenerateurDOE.Components.Shared
@inject IChantierService chantierService
@inject IDeletionService deletionService
@inject Radzen.DialogService DialogService
@inject Radzen.NotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Gestion des Chantiers</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12">
            <h2>Gestion des Chantiers</h2>
        </div>
    </div>

    <!-- Barre de recherche et actions -->
    <div class="row mb-3">
        <div class="col-md-6">
            <AutoComplete T="Chantier"
                         Items="chantiers"
                         DisplaySelector="@(c => $"{c.NomProjet} - {c.Adresse} ({c.MaitreOuvrage})")"
                         Placeholder="Rechercher dans tous les champs..."
                         OnTextChanged="OnChantierSearchChanged"
                         OnItemSelected="@(chantier => NavigateToChantierDetail(chantier.Id))"
                         MinSearchLength="0">
                <ItemTemplate>
                    <div class="p-2">
                        <div class="fw-bold text-primary">@context.NomProjet</div>
                        <div class="text-muted small">@context.MaitreOuvrage - @context.Adresse</div>
                    </div>
                </ItemTemplate>
            </AutoComplete>
        </div>
        <div class="col-md-3">
            <div class="form-check align-middle">
                <input class="form-check-input" type="checkbox" 
                       @bind="includeArchived" @bind:after="RefreshChantiers" 
                       id="includeArchivedCheck"/>
                <label class="form-check-label" for="includeArchivedCheck">
                    Afficher les chantiers archivés
                </label>
            </div>
        </div>
        <div class="col-md-3 text-end">
            <button class="btn btn-primary" @onclick="ShowCreateDialog">
                <i class="oi oi-plus"></i> Nouveau Chantier
            </button>
        </div>
    </div>


    <!-- Liste des chantiers -->
    @if (chantiers?.Any() == true)
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Liste des Chantiers (@chantiers.Count)</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Nom du Projet</th>
                                        <th>Maître d'Ouvrage</th>
                                        <th>Adresse</th>
                                        <th>Modifié le</th>
                                        <th>Statut</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var chantier in chantiers.Take(20))
                                    {
                                        <tr class="@(chantier.EstArchive ? "text-muted" : "")"
                                            style="cursor: pointer;"
                                            @onclick="@(() => NavigateToChantierDetail(chantier.Id))">
                                            <td>@chantier.NomProjet</td>
                                            <td>@chantier.MaitreOuvrage</td>
                                            <td>@chantier.Adresse</td>
                                            <td>@chantier.DateModification.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                @if (chantier.EstArchive)
                                                {
                                                    <span class="badge bg-warning">Archivé</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">Actif</span>
                                                }
                                            </td>
                                            <td @onclick:stopPropagation="true">
                                                <button class="btn btn-outline-primary me-1 px-3"
                                                        @onclick="@(() => NavigateToChantierDetail(chantier.Id))"
                                                        title="Consulter le chantier">
                                                    <i class="oi oi-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-secondary me-1 px-3"
                                                        @onclick="() => ShowEditDialog(chantier)"
                                                        title="Modifier le chantier">
                                                    <i class="oi oi-pencil"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }

    @if (chantiers?.Any() != true && !isLoading)
    {
        <div class="text-center text-muted">
            <p>Aucun chantier trouvé.</p>
        </div>
    }
</div>


@code {
    private List<Chantier> chantiers = new();
    private bool includeArchived = false;
    private bool isLoading = false;
    private string currentSearchText = "";


    protected override async Task OnInitializedAsync()
    {
        await RefreshChantiers();
    }

    private async Task RefreshChantiers()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(currentSearchText))
            {
                chantiers = await chantierService.GetAllAsync(includeArchived);
            }
            else
            {
                chantiers = await chantierService.SearchAsync(currentSearchText, includeArchived);
            }

        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", $"Erreur lors du chargement: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] LoadChantiers error (masqué): {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnChantierSearchChanged(string searchText)
    {
        try
        {
            currentSearchText = searchText;
            
            if (string.IsNullOrWhiteSpace(searchText))
            {
                chantiers = await chantierService.GetAllAsync(includeArchived);
            }
            else
            {
                chantiers = await chantierService.SearchAsync(searchText.Trim(), includeArchived);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", $"Erreur lors de la recherche: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] SearchChantiers error (masqué): {ex.Message}");
            chantiers = new List<Chantier>();
            StateHasChanged();
        }
    }



    private async Task ShowCreateDialog()
    {
        var chantier = new Chantier();

        var result = await DialogService.OpenAsync<ChantierEditDialog>("Nouveau Chantier", 
            new Dictionary<string, object> { { "Chantier", chantier } },
            new Radzen.DialogOptions { Width = "700px", Height = "500px" });

        if (result == true)
        {
            await RefreshChantiers();
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Chantier créé avec succès");
        }
    }

    private async Task ShowEditDialog(Chantier chantier)
    {
        var result = await DialogService.OpenAsync<ChantierEditDialog>("Modifier Chantier", 
            new Dictionary<string, object> { { "Chantier", chantier } },
            new Radzen.DialogOptions { Width = "700px", Height = "500px" });

        if (result == true)
        {
            await RefreshChantiers();
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Chantier modifié avec succès");
        }
    }

    private async Task ArchiveChantier(int chantierId)
    {
        try
        {
            await chantierService.ArchiveAsync(chantierId);
            await RefreshChantiers();
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Chantier archivé avec succès");
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", $"Erreur lors de l'archivage: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] ArchiveChantier error (masqué): {ex.Message}");
        }
    }

    private async Task UnarchiveChantier(int chantierId)
    {
        try
        {
            await chantierService.UnarchiveAsync(chantierId);
            await RefreshChantiers();
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Chantier désarchivé avec succès");
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", $"Erreur lors du désarchivage: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] UnarchiveChantier error (masqué): {ex.Message}");
        }
    }

    /// <summary>
    /// Supprime un chantier avec prévisualisation avancée de l'impact
    /// Utilise le DeletionService robuste avec validation, gestion des fichiers et audit
    /// </summary>
    private async Task DeleteChantier(int chantierId)
    {
        try
        {
            // 1. Obtenir l'impact de la suppression
            var impact = await deletionService.GetChantierDeletionImpactAsync(chantierId);

            // 2. Construire le message de confirmation détaillé
            var confirmationMessage = $"Êtes-vous sûr de vouloir supprimer ce chantier ?\n\n" +
                                    $"⚠️ IMPACT DE LA SUPPRESSION :\n" +
                                    $"• {impact.DocumentsCount} document(s) généré(s)\n" +
                                    $"• {impact.FichesTechniquesCount} fiche(s) technique(s)\n" +
                                    $"• {impact.PdfFilesCount} fichier(s) PDF\n" +
                                    $"• {impact.SectionsLibresCount} section(s) libre(s)\n" +
                                    $"• {FormatFileSize(impact.TotalFileSize)} de données\n\n";

            if (impact.Warnings.Any())
            {
                confirmationMessage += $"🔸 AVERTISSEMENTS :\n";
                foreach (var warning in impact.Warnings)
                {
                    confirmationMessage += $"• {warning}\n";
                }
                confirmationMessage += "\n";
            }

            if (impact.AffectedItems.Any())
            {
                var displayItems = impact.AffectedItems.Take(5).ToList();
                confirmationMessage += $"📋 ÉLÉMENTS CONCERNÉS :\n";
                foreach (var item in displayItems)
                {
                    confirmationMessage += $"• {item}\n";
                }
                if (impact.AffectedItems.Count > 5)
                {
                    confirmationMessage += $"• ... et {impact.AffectedItems.Count - 5} autre(s)\n";
                }
            }

            confirmationMessage += "\n❌ Cette action est IRRÉVERSIBLE !";

            // 3. Confirmation avec détails
            var confirmResult = await DialogService.Confirm(
                confirmationMessage,
                "⚠️ SUPPRESSION DÉFINITIVE",
                new Radzen.ConfirmOptions {
                    OkButtonText = "🗑️ SUPPRIMER DÉFINITIVEMENT",
                    CancelButtonText = "❌ Annuler",
                    Width = "600px",
                    Height = "500px"
                });

            if (confirmResult == true)
            {
                // 4. Notification de début d'opération
                NotificationService.Notify(Radzen.NotificationSeverity.Info, "Suppression en cours...",
                    $"Suppression de {impact.DocumentsCount} document(s) et {impact.PdfFilesCount} fichier(s)...");

                // 5. Suppression avec options d'audit
                var options = new DeletionOptions
                {
                    DeletePhysicalFiles = true,
                    EnableAuditLogging = true,
                    InitiatedBy = "Interface Chantiers",
                    Reason = "Suppression manuelle via interface utilisateur"
                };

                var result = await deletionService.DeleteChantierAsync(chantierId, options);

                if (result.Success)
                {
                    // 6. Mise à jour de l'interface
                    await RefreshChantiers();

                    // 7. Notification de succès détaillée
                    var successMessage = $"Chantier supprimé avec succès !\n" +
                                       $"• {result.FilesDeleted} fichier(s) supprimé(s)\n" +
                                       $"• {result.RecordsDeleted} enregistrement(s) supprimé(s)\n" +
                                       $"• Durée: {result.Duration.TotalSeconds:F2}s";

                    NotificationService.Notify(Radzen.NotificationSeverity.Success, "✅ Suppression Réussie", successMessage);
                }
                else
                {
                    // 8. Gestion des erreurs avec détails
                    var errorMessage = "Échec de la suppression :\n" + string.Join("\n", result.Messages);
                    NotificationService.Notify(Radzen.NotificationSeverity.Error, "❌ Erreur de Suppression", errorMessage);

                    if (result.Exception != null)
                    {
                        Console.WriteLine($"[DEBUG] Deletion error: {result.Exception.Message}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // 9. Gestion d'erreur globale
            var errorMsg = $"Erreur inattendue lors de la suppression: {ex.Message}";
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "❌ Erreur Critique", errorMsg);
            Console.WriteLine($"[ERROR] DeleteChantier exception: {ex}");
        }
    }



    /// <summary>
    /// Navigate vers les détails d'un chantier
    /// </summary>
    private void NavigateToChantierDetail(int chantierId)
    {
        Navigation.NavigateTo($"/chantier/{chantierId}");
    }

    /// <summary>
    /// Formate une taille de fichier en unités lisibles
    /// </summary>
    private static string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 B";

        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size = size / 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }
}