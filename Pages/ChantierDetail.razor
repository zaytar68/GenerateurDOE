@page "/chantier/{ChantierId:int}"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@inject IChantierService chantierService
@inject IDeletionService deletionService
@inject IDocumentGenereService documentGenereService
@inject IDocumentDownloadService documentDownloadService
@inject IPdfProgressDialogService pdfProgressDialogService
@inject IDocumentRepositoryService documentRepositoryService
@inject NavigationManager Navigation
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Détail du Chantier</PageTitle>

<div class="container-fluid">
    <!-- En-tête avec bouton retour -->
    <div class="d-flex align-items-center mb-4">
        <button class="btn btn-outline-secondary me-3" @onclick="RetourListeChantiers">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Retour à la liste
        </button>
        <h1 class="mb-0">
            <span class="oi oi-wrench" aria-hidden="true"></span>
            Détail du Chantier
        </h1>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (chantier == null)
    {
        <div class="alert alert-warning">
            <span class="oi oi-warning" aria-hidden="true"></span>
            Chantier introuvable
        </div>
    }
    else
    {
        <!-- Cadre bleu avec les informations du chantier -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">@chantier.NomProjet</h4>
                        <div>
                            <button class="btn btn-light btn-sm me-2" @onclick="() => ArchiverChantier()">
                                <i class="oi oi-box"></i> @(chantier.EstArchive ? "Désarchiver" : "Archiver")
                            </button>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => ModifierChantier()">
                                <i class="oi oi-pencil"></i> Modifier
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => SupprimerChantier()">
                                <i class="oi oi-trash"></i> Supprimer
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Maître d'œuvre:</strong> @chantier.MaitreOeuvre</p>
                                <p><strong>Maître d'ouvrage:</strong> @chantier.MaitreOuvrage</p>
                                <p><strong>Adresse:</strong> @chantier.Adresse</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Créé le:</strong> @chantier.DateCreation.ToString("dd/MM/yyyy")</p>
                                <p><strong>Modifié le:</strong> @chantier.DateModification.ToString("dd/MM/yyyy")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Section Documents Générés -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <span class="oi oi-document" aria-hidden="true"></span>
                                Documents Générés (@documentsGeneres.Count)
                            </h5>
                            <button class="btn btn-primary" @onclick="NouveauDocument">
                                <span class="oi oi-plus" aria-hidden="true"></span>
                                Nouveau Document
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (!documentsGeneres.Any())
                        {
                            <div class="text-center text-muted py-4">
                                <span class="oi oi-document" aria-hidden="true" style="font-size: 3rem; opacity: 0.3;"></span>
                                <p class="mt-2">Aucun document généré pour ce chantier</p>
                                <button class="btn btn-primary" @onclick="NouveauDocument">
                                    Créer le premier document
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Type de Document</th>
                                            <th>Nom du Fichier</th>
                                            <th>Lot</th>
                                            <th>Date de Création</th>
                                            <th>Options</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var document in documentsGeneres)
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge bg-@GetTypeBadgeColor(document.TypeDocument)">
                                                        @GetTypeDisplayName(document.TypeDocument)
                                                    </span>
                                                </td>
                                                <td>@document.NomFichier</td>
                                                <td>@GetLotDisplayText(document)</td>
                                                <td>@document.DateCreation.ToString("dd/MM/yyyy HH:mm")</td>
                                                <td>
                                                    @if (document.IncludePageDeGarde)
                                                    {
                                                        <span class="badge bg-info me-1">Page de garde</span>
                                                    }
                                                    @if (document.IncludeTableMatieres)
                                                    {
                                                        <span class="badge bg-info">Table des matières</span>
                                                    }
                                                </td>
                                                <td>
                                                    <button class="btn btn-outline-primary btn-sm me-1" 
                                                            @onclick="() => TelechargerDocument(document)"
                                                            title="Télécharger">
                                                        <i class="oi oi-cloud-download"></i>
                                                    </button>
                                                    <button class="btn btn-outline-info btn-sm me-1" 
                                                            @onclick="() => EditerContenuDocument(document)"
                                                            title="Éditer le contenu">
                                                        <i class="oi oi-pencil"></i>
                                                    </button>
                                                    
                                                    <button class="btn btn-outline-info btn-sm me-1"
                                                            @onclick="() => DupliquerDocument(document)"
                                                            title="Dupliquer">
                                                            <i class="oi oi-collapse-right"></i>
                                                    </button>

                                                    <button class="btn btn-outline-danger btn-sm" 
                                                            @onclick="() => SupprimerDocument(document)"
                                                            title="Supprimer">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter] public int ChantierId { get; set; }

    private Chantier? chantier;
    private List<DocumentGenere> documentsGeneres = new();
    private bool isLoading = true;
    private bool isInitialized = false;


    protected override async Task OnInitializedAsync()
    {
        // Protection contre le prerendering : éviter les doubles exécutions
        if (!isInitialized)
        {
            await RefreshPageAsync();
            isInitialized = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // ⚡ CORRECTION CONCURRENCE: Éviter double exécution OnInitialized + OnParametersSet
        if (ChantierId > 0 && isInitialized)
        {
            await RefreshPageAsync();
        }
    }


    public void Dispose()
    {
        // Aucun événement à nettoyer depuis suppression LocationChanged
    }

    private void ForceRefreshPage()
    {
        // Navigation forcée pour garantir la fraîcheur des données après CRUD
        Navigation.NavigateTo($"/chantier/{ChantierId}", forceLoad: true);
    }

    private async Task RefreshPageAsync()
    {
        await ChargerChantier();
        StateHasChanged();
    }

    private async Task ChargerChantier()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            chantier = await chantierService.GetByIdAsync(ChantierId);
            if (chantier != null)
            {
                documentsGeneres = (await documentGenereService.GetDocumentsGeneresByChantierId(ChantierId)).ToList();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Erreur lors du chargement du chantier: {ex.Message}");
            Console.WriteLine($"[ERROR] ChantierDetail ChargerChantier: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RetourListeChantiers()
    {
        Navigation.NavigateTo("/chantiers");
    }

    private async Task ArchiverChantier()
    {
        if (chantier == null) return;

        try
        {
            if (chantier.EstArchive)
            {
                await chantierService.UnarchiveAsync(chantier.Id);
                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Chantier désarchivé");
            }
            else
            {
                await chantierService.ArchiveAsync(chantier.Id);
                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Chantier archivé");
            }

            // ⚡ INVALIDATION CACHE : Force rafraîchissement immédiat de l'affichage
            documentRepositoryService.InvalidateChantierCache(ChantierId);

            ForceRefreshPage(); // Recharger forcé pour mettre à jour l'état
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Erreur lors de l'archivage: {ex.Message}");
            Console.WriteLine($"[ERROR] ArchiverChantier: {ex.Message}");
        }
    }

    private void ModifierChantier()
    {
        // TODO: Implémenter la modification du chantier (dialogue modal)
        NotificationService.Notify(Radzen.NotificationSeverity.Info, "À venir", "Fonctionnalité en cours de développement");
    }

    /// <summary>
    /// Supprime un chantier avec prévisualisation avancée de l'impact
    /// Utilise le DeletionService robuste avec validation, gestion des fichiers et audit
    /// </summary>
    private async Task SupprimerChantier()
    {
        if (chantier == null) return;

        try
        {
            // 1. Obtenir l'impact de la suppression
            var impact = await deletionService.GetChantierDeletionImpactAsync(chantier.Id);

            // 2. Construire le message de confirmation détaillé
            var confirmationMessage = $"Êtes-vous sûr de vouloir supprimer ce chantier ?\n\n" +
                                    $"⚠️ IMPACT DE LA SUPPRESSION :\n" +
                                    $"• {impact.DocumentsCount} document(s) généré(s)\n" +
                                    $"• {impact.FichesTechniquesCount} fiche(s) technique(s)\n" +
                                    $"• {impact.PdfFilesCount} fichier(s) PDF\n" +
                                    $"• {impact.SectionsLibresCount} section(s) libre(s)\n" +
                                    $"• {FormatFileSize(impact.TotalFileSize)} de données\n\n";

            if (impact.Warnings.Any())
            {
                confirmationMessage += $"🔸 AVERTISSEMENTS :\n";
                foreach (var warning in impact.Warnings)
                {
                    confirmationMessage += $"• {warning}\n";
                }
                confirmationMessage += "\n";
            }

            if (impact.AffectedItems.Any())
            {
                var displayItems = impact.AffectedItems.Take(5).ToList();
                confirmationMessage += $"📋 ÉLÉMENTS CONCERNÉS :\n";
                foreach (var item in displayItems)
                {
                    confirmationMessage += $"• {item}\n";
                }
                if (impact.AffectedItems.Count > 5)
                {
                    confirmationMessage += $"• ... et {impact.AffectedItems.Count - 5} autre(s)\n";
                }
            }

            confirmationMessage += "\n❌ Cette action est IRRÉVERSIBLE !";

            // 3. Confirmation avec détails
            var confirmResult = await DialogService.Confirm(
                confirmationMessage,
                "⚠️ SUPPRESSION DÉFINITIVE",
                new Radzen.ConfirmOptions {
                    OkButtonText = "🗑️ SUPPRIMER DÉFINITIVEMENT",
                    CancelButtonText = "❌ Annuler",
                    Width = "600px",
                    Height = "500px"
                });

            if (confirmResult == true)
            {
                // 4. Notification de début d'opération
                NotificationService.Notify(Radzen.NotificationSeverity.Info, "Suppression en cours...",
                    $"Suppression de {impact.DocumentsCount} document(s) et {impact.PdfFilesCount} fichier(s)...");

                // 5. Suppression avec options d'audit
                var options = new DeletionOptions
                {
                    DeletePhysicalFiles = true,
                    EnableAuditLogging = true,
                    InitiatedBy = "Page Détail Chantier",
                    Reason = "Suppression via interface de détail du chantier"
                };

                var result = await deletionService.DeleteChantierAsync(chantier.Id, options);

                if (result.Success)
                {
                    // 6. Notification de succès détaillée
                    var successMessage = $"Chantier supprimé avec succès !\n" +
                                       $"• {result.FilesDeleted} fichier(s) supprimé(s)\n" +
                                       $"• {result.RecordsDeleted} enregistrement(s) supprimé(s)\n" +
                                       $"• Durée: {result.Duration.TotalSeconds:F2}s";

                    NotificationService.Notify(Radzen.NotificationSeverity.Success, "✅ Suppression Réussie", successMessage);

                    // 7. Retour à la liste des chantiers
                    Navigation.NavigateTo("/chantiers");
                }
                else
                {
                    // 8. Gestion des erreurs avec détails
                    var errorMessage = "Échec de la suppression :\n" + string.Join("\n", result.Messages);
                    NotificationService.Notify(Radzen.NotificationSeverity.Error, "❌ Erreur de Suppression", errorMessage);

                    if (result.Exception != null)
                    {
                        Console.WriteLine($"[DEBUG] Deletion error: {result.Exception.Message}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // 9. Gestion d'erreur globale
            var errorMsg = $"Erreur inattendue lors de la suppression: {ex.Message}";
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "❌ Erreur Critique", errorMsg);
            Console.WriteLine($"[ERROR] SupprimerChantier exception: {ex}");
        }
    }

    // Méthodes pour la gestion des documents
    private void NouveauDocument()
    {
        Navigation.NavigateTo($"/document/edit/nouveau/{ChantierId}");
    }

    private async Task TelechargerDocument(DocumentGenere document)
    {
        await pdfProgressDialogService.StartPdfGenerationWithProgressAsync(
            document.Id,
            document.NomFichier ?? "Document",
            DialogService,
            documentDownloadService,
            this,
            JSRuntime,
            NotificationService);
    }


    private async Task DupliquerDocument(DocumentGenere document)
    {
        try
        {
            var result = await DialogService.OpenAsync<DuplicationModal>("Dupliquer le document",
                new Dictionary<string, object> { { "OriginalDocument", document } });

            if (result is DuplicationModal.DuplicationResult duplicationResult)
            {
                await documentGenereService.DuplicateToChantierAsync(
                    document.Id,
                    duplicationResult.NomFichier,
                    duplicationResult.ChantierId,
                    duplicationResult.NumeroLot,
                    duplicationResult.IntituleLot);

                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                    "Document dupliqué avec succès vers le chantier de destination");

                // Recharger la liste si le document est dupliqué dans le même chantier
                if (duplicationResult.ChantierId == ChantierId)
                {
                    // ⚡ INVALIDATION CACHE : Force rafraîchissement immédiat pour duplication même chantier
                    documentRepositoryService.InvalidateChantierCache(ChantierId);

                    ForceRefreshPage();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Erreur lors de la duplication: {ex.Message}");
            Console.WriteLine($"[ERROR] DupliquerDocument: {ex.Message}");
        }
    }

    private void ModifierDocument(DocumentGenere document)
    {
        Navigation.NavigateTo($"/document/edit/{document.Id}");
    }

    private void EditerContenuDocument(DocumentGenere document)
    {
        // Navigation vers l'onglet sections pour éditer le contenu
        Navigation.NavigateTo($"/document/edit/{document.Id}#sections");
    }

    private async Task SupprimerDocument(DocumentGenere document)
    {
        var result = await DialogService.Confirm(
            $"Êtes-vous sûr de vouloir supprimer le document '{document.NomFichier}' ?",
            "Confirmation de suppression",
            new Radzen.ConfirmOptions { OkButtonText = "Supprimer", CancelButtonText = "Annuler" });

        if (result == true)
        {
            try
            {
                await documentGenereService.DeleteDocumentGenereAsync(document.Id);

                // ⚡ INVALIDATION CACHE : Force rafraîchissement immédiat de l'affichage
                documentRepositoryService.InvalidateChantierCache(ChantierId);

                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Document supprimé");
                ForceRefreshPage(); // Recharger la liste
            }
            catch (Exception ex)
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                    $"Erreur lors de la suppression: {ex.Message}");
                Console.WriteLine($"[ERROR] SupprimerDocument: {ex.Message}");
            }
        }
    }

    // Méthodes utilitaires pour l'affichage

    /// <summary>
    /// Formate une taille de fichier en unités lisibles (B, KB, MB, GB)
    /// </summary>
    private static string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 B";

        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size = size / 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private string GetTypeBadgeColor(TypeDocumentGenere type)
    {
        return type switch
        {
            TypeDocumentGenere.DOE => "primary",
            TypeDocumentGenere.DossierTechnique => "info",
            TypeDocumentGenere.MemoireTechnique => "warning",
            _ => "secondary"
        };
    }

    private string GetTypeDisplayName(TypeDocumentGenere type)
    {
        return type switch
        {
            TypeDocumentGenere.DOE => "DOE",
            TypeDocumentGenere.DossierTechnique => "Dossier Technique",
            TypeDocumentGenere.MemoireTechnique => "Mémoire Technique",
            _ => type.ToString()
        };
    }

    private string GetLotDisplayText(DocumentGenere document)
    {
        var hasNumero = !string.IsNullOrWhiteSpace(document.NumeroLot);
        var hasIntitule = !string.IsNullOrWhiteSpace(document.IntituleLot);

        if (hasNumero && hasIntitule)
        {
            return $"{document.NumeroLot} - {document.IntituleLot}";
        }
        else if (hasNumero)
        {
            return document.NumeroLot;
        }
        else if (hasIntitule)
        {
            return document.IntituleLot;
        }
        else
        {
            return "Non défini";
        }
    }
}

<script>
    window.downloadFile = function (fileName, base64String, mimeType = 'application/pdf') {
        const link = document.createElement('a');
        link.href = 'data:' + mimeType + ';base64,' + base64String;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>