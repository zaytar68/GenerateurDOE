@page "/test-pdf"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@using GenerateurDOE.Data
@using Microsoft.EntityFrameworkCore
@implements IDisposable

@inject IDocumentGenereService DocumentGenereService
@inject ILoadingStateService LoadingStateService
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext Context

<PageTitle>Test G√©n√©ration PDF</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>üß™ Test de G√©n√©ration PDF</h3>
            <p class="text-muted">Interface de test pour valider la g√©n√©ration PDF r√©elle avec PuppeteerSharp</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üìä Statut des Services PDF</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-success me-2">‚úÖ</span>
                                <span>PuppeteerSharp 15.1.0</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-success me-2">‚úÖ</span>
                                <span>PDFSharp 6.1.1</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-success me-2">‚úÖ</span>
                                <span>Services PDF enregistr√©s</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-success me-2">‚úÖ</span>
                                <span>Templates HTML</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-success me-2">‚úÖ</span>
                                <span>Assembly multi-PDFs</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-success me-2">‚úÖ</span>
                                <span>Application fonctionnelle</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üöÄ Tests de G√©n√©ration</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <button class="btn btn-secondary w-100"
                                    disabled="true">
                                <i class="oi oi-code"></i>
                                Test HTML (D√©sactiv√©)
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-secondary w-100"
                                    disabled="true">
                                <i class="oi oi-text"></i>
                                Test Markdown (D√©sactiv√©)
                            </button>
                        </div>
                        <div class="col-md-3">
                            <LoadingWrapper IsLoading="@LoadingStateService.IsLoading("pdf-test")"
                                          LoadingMessage="G√©n√©ration PDF...">
                                <ContentTemplate>
                                    <button class="btn btn-primary w-100"
                                            @onclick="TestPdfGeneration"
                                            disabled="@LoadingStateService.IsAnyLoading()">
                                        <i class="oi oi-document"></i>
                                        Test PDF ‚ú®
                                    </button>
                                </ContentTemplate>
                            </LoadingWrapper>
                        </div>
                        <div class="col-md-3">
                            <LoadingWrapper IsLoading="@LoadingStateService.IsLoading("pdf-complete")"
                                          LoadingMessage="G√©n√©ration PDF complet...">
                                <ContentTemplate>
                                    <button class="btn btn-danger w-100"
                                            @onclick="TestCompletePdfWithFiches"
                                            disabled="@LoadingStateService.IsAnyLoading()">
                                        <i class="oi oi-document"></i>
                                        Test PDF Complet üéØ
                                    </button>
                                </ContentTemplate>
                            </LoadingWrapper>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isGenerating)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-primary">
                    <div class="card-body text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">G√©n√©ration en cours...</span>
                        </div>
                        <p class="mt-2 mb-0">@statusMessage</p>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(lastGeneratedFile))
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">‚úÖ PDF G√©n√©r√© avec Succ√®s !</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Fichier :</strong> @lastGeneratedFile</p>
                        <p><strong>Taille :</strong> @lastFileSize</p>
                        <p><strong>Dur√©e :</strong> @lastGenerationTime ms</p>
                        <button class="btn btn-outline-primary" 
                                @onclick="DownloadLastPdf">
                            <i class="oi oi-cloud-download"></i>
                            T√©l√©charger le PDF
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger" role="alert">
                    <strong>‚ùå Erreur :</strong> @errorMessage
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isGenerating = false;
    private string statusMessage = "";
    private string lastGeneratedFile = "";
    private string lastFileSize = "";
    private long lastGenerationTime = 0;
    private string errorMessage = "";
    private int testChantierId = 0;

    protected override async Task OnInitializedAsync()
    {
        // On va utiliser un ID de chantier fictif pour les tests
        // Dans une vraie impl√©mentation, on cr√©erait un chantier de test
        testChantierId = 1;

        // Abonnement aux changements d'√©tat de chargement
        LoadingStateService.StateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        LoadingStateService.StateChanged -= StateHasChanged;
    }
    
    private async Task TestHtmlGeneration()
    {
        try
        {
            isGenerating = true;
            statusMessage = "G√©n√©ration HTML...";
            errorMessage = "";
            StateHasChanged();
            
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            
            // TODO(human): Test de g√©n√©ration HTML avec nouvelle API
            // 1. Cr√©er un DocumentGenere temporaire pour testChantierId
            // 2. Appeler ExportDocumentAsync(documentId, FormatExport.HTML)
            var htmlContent = "TODO: Impl√©menter nouvelle logique HTML";
            
            stopwatch.Stop();
            lastGenerationTime = stopwatch.ElapsedMilliseconds;
            
            // Sauvegarder le fichier HTML
            var fileName = $"test-html-{DateTime.Now:yyyyMMdd-HHmmss}.html";
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp", fileName);
            Directory.CreateDirectory(Path.GetDirectoryName(fullPath)!);
            await File.WriteAllTextAsync(fullPath, htmlContent);
            
            lastGeneratedFile = fullPath;
            var fileInfo = new FileInfo(lastGeneratedFile);
            lastFileSize = $"{fileInfo.Length / 1024} KB";
            
            statusMessage = "HTML g√©n√©r√© avec succ√®s !";
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la g√©n√©ration HTML : {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }
    
    private async Task TestMarkdownGeneration()
    {
        try
        {
            isGenerating = true;
            statusMessage = "G√©n√©ration Markdown...";
            errorMessage = "";
            StateHasChanged();
            
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            
            // TODO(human): Test de g√©n√©ration Markdown avec nouvelle API
            // 1. Cr√©er un DocumentGenere temporaire pour testChantierId
            // 2. Appeler ExportDocumentAsync(documentId, FormatExport.Markdown)
            var markdownContent = "TODO: Impl√©menter nouvelle logique Markdown";
            
            stopwatch.Stop();
            lastGenerationTime = stopwatch.ElapsedMilliseconds;
            
            // Sauvegarder le fichier Markdown
            var fileName = $"test-markdown-{DateTime.Now:yyyyMMdd-HHmmss}.md";
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp", fileName);
            Directory.CreateDirectory(Path.GetDirectoryName(fullPath)!);
            await File.WriteAllTextAsync(fullPath, markdownContent);
            
            lastGeneratedFile = fullPath;
            var fileInfo = new FileInfo(lastGeneratedFile);
            lastFileSize = $"{fileInfo.Length / 1024} KB";
            
            statusMessage = "Markdown g√©n√©r√© avec succ√®s !";
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la g√©n√©ration Markdown : {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }
    
    private async Task TestPdfGeneration()
    {
        try
        {
            LoadingStateService.SetLoading("pdf-test", true);
            isGenerating = true;
            statusMessage = "üöÄ G√©n√©ration PDF avec PuppeteerSharp...";
            errorMessage = "";
            StateHasChanged();

            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            
            // Test de g√©n√©ration PDF avec la vraie API
            // 1. Rechercher un document existant ou utiliser le premier disponible
            var documentForTest = await Context.DocumentsGeneres
                .Include(d => d.Chantier)
                .FirstOrDefaultAsync();

            if (documentForTest == null)
            {
                throw new InvalidOperationException("Aucun document disponible pour le test PDF");
            }

            // 2. G√©n√©rer le PDF avec GenerateCompletePdfAsync
            var pdfBytes = await DocumentGenereService.GenerateCompletePdfAsync(documentForTest.Id);

            // 3. Sauvegarder le PDF de test
            var fileName = $"test-pdf-{documentForTest.Id}-{DateTime.Now:yyyyMMdd-HHmmss}.pdf";
            var tempDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp");
            Directory.CreateDirectory(tempDir);
            var pdfPath = Path.Combine(tempDir, fileName);

            await File.WriteAllBytesAsync(pdfPath, pdfBytes);
            
            stopwatch.Stop();
            lastGenerationTime = stopwatch.ElapsedMilliseconds;
            
            lastGeneratedFile = pdfPath;
            if (File.Exists(lastGeneratedFile))
            {
                var fileInfo = new FileInfo(lastGeneratedFile);
                lastFileSize = $"{fileInfo.Length / 1024} KB";
                statusMessage = "üéâ PDF g√©n√©r√© avec PuppeteerSharp + PDFSharp !";
            }
            else
            {
                errorMessage = "Le fichier PDF n'a pas √©t√© cr√©√©";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‚ùå Erreur lors de la g√©n√©ration PDF : {ex.Message}";
        }
        finally
        {
            LoadingStateService.SetLoading("pdf-test", false);
            isGenerating = false;
            StateHasChanged();
        }
    }
    
    private async Task CreateTestData()
    {
        try
        {
            isGenerating = true;
            statusMessage = "Cr√©ation de donn√©es de test...";
            errorMessage = "";
            StateHasChanged();
            
            // Cette m√©thode pourrait cr√©er un chantier et des donn√©es de test
            // Pour l'instant, on simule juste une pause
            await Task.Delay(1000);
            
            statusMessage = "Donn√©es de test cr√©√©es (simulation)";
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la cr√©ation des donn√©es : {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }
    
    private async Task DownloadLastPdf()
    {
        if (!string.IsNullOrEmpty(lastGeneratedFile) && File.Exists(lastGeneratedFile))
        {
            var fileName = Path.GetFileName(lastGeneratedFile);
            var fileBytes = await File.ReadAllBytesAsync(lastGeneratedFile);
            var base64 = Convert.ToBase64String(fileBytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
        }
    }
    
    private async Task TestCompletePdfWithFiches()
    {
        try
        {
            LoadingStateService.SetLoading("pdf-complete", true);
            isGenerating = true;
            statusMessage = "üéØ Recherche d'un document avec fiches techniques...";
            errorMessage = "";
            StateHasChanged();
            
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            
            // 1. Rechercher un document avec FTConteneur et des √©l√©ments
            // üîß CORRECTION CONCURRENCE CRITIQUE: AsSplitQuery pour multiple ThenInclude
            var documentWithFT = await Context.DocumentsGeneres
                .Include(d => d.Chantier)
                .Include(d => d.FTConteneur)
                    .ThenInclude(ftc => ftc!.Elements)
                        .ThenInclude(fte => fte.ImportPDF)
                .Include(d => d.FTConteneur)
                    .ThenInclude(ftc => ftc!.Elements)
                        .ThenInclude(fte => fte.FicheTechnique)
                .AsSplitQuery()  // ‚úÖ OBLIGATOIRE pour √©viter erreurs concurrence
                .Where(d => d.FTConteneur != null && d.FTConteneur.Elements.Any(e => e.ImportPDF != null))
                .FirstOrDefaultAsync();
            
            if (documentWithFT == null)
            {
                statusMessage = "üìÑ Aucun document avec fiches techniques trouv√©. Cr√©ation d'un document de test...";
                StateHasChanged();
                
                // Cr√©er un document de test avec FTConteneur
                documentWithFT = await CreateTestDocumentWithFTAsync();
            }
            
            statusMessage = $"‚úÖ Document trouv√© : {documentWithFT.NomFichier} (ID: {documentWithFT.Id})";
            StateHasChanged();
            await Task.Delay(1000); // Pause pour voir le message
            
            // 2. Analyser le contenu du document
            var ftElementsCount = documentWithFT.FTConteneur?.Elements.Count ?? 0;
            var pdfFilesCount = documentWithFT.FTConteneur?.Elements.Count(e => e.ImportPDF != null) ?? 0;
            
            statusMessage = $"üìä Analyse : {ftElementsCount} √©l√©ments FT, {pdfFilesCount} fichiers PDF √† int√©grer";
            StateHasChanged();
            await Task.Delay(1500);
            
            // 3. G√©n√©rer le PDF complet avec int√©gration des fiches techniques
            statusMessage = "üöÄ G√©n√©ration PDF COMPLET avec int√©gration des fiches techniques...";
            StateHasChanged();
            
            var pdfBytes = await DocumentGenereService.GenerateCompletePdfAsync(documentWithFT.Id);
            
            stopwatch.Stop();
            lastGenerationTime = stopwatch.ElapsedMilliseconds;
            
            // 4. Sauvegarder le PDF g√©n√©r√©
            var fileName = $"test-complet-{documentWithFT.Id}-{DateTime.Now:yyyyMMdd-HHmmss}.pdf";
            var tempDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp");
            Directory.CreateDirectory(tempDir);
            var filePath = Path.Combine(tempDir, fileName);
            
            await File.WriteAllBytesAsync(filePath, pdfBytes);
            
            lastGeneratedFile = filePath;
            var fileInfo = new FileInfo(lastGeneratedFile);
            lastFileSize = $"{fileInfo.Length / 1024} KB";
            
            // 5. Analyse des r√©sultats
            var analysisResult = AnalyzePdfIntegration(pdfBytes, ftElementsCount, pdfFilesCount);
            
            statusMessage = $"üéâ PDF COMPLET g√©n√©r√© avec succ√®s ! {analysisResult}";
        }
        catch (Exception ex)
        {
            errorMessage = $"‚ùå Erreur lors de la g√©n√©ration PDF compl√®te : {ex.Message}";
            
            // Log d√©taill√© pour debug
            if (ex.InnerException != null)
            {
                errorMessage += $" | Inner: {ex.InnerException.Message}";
            }
        }
        finally
        {
            LoadingStateService.SetLoading("pdf-complete", false);
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task<DocumentGenere> CreateTestDocumentWithFTAsync()
    {
        // Si aucun document avec FT existe, cr√©er un document de test
        // Pour l'instant, retourner le premier document disponible
        var firstDoc = await Context.DocumentsGeneres
            .Include(d => d.Chantier)
            .FirstOrDefaultAsync();
            
        if (firstDoc == null)
        {
            throw new InvalidOperationException("Aucun document disponible dans la base de donn√©es pour les tests");
        }
        
        return firstDoc;
    }
    
    private string AnalyzePdfIntegration(byte[] pdfBytes, int expectedElements, int expectedPdfFiles)
    {
        var sizeKB = pdfBytes.Length / 1024;
        
        // Analyse basique de la taille pour d√©tecter si les PDFs ont √©t√© int√©gr√©s
        if (sizeKB < 50)
        {
            return $"‚ö†Ô∏è PDF petit ({sizeKB} KB) - Possible probl√®me d'int√©gration";
        }
        else if (sizeKB > 500 && expectedPdfFiles > 0)
        {
            return $"‚úÖ PDF volumineux ({sizeKB} KB) - Int√©gration probable des {expectedPdfFiles} fichiers";
        }
        else
        {
            return $"üìÑ PDF g√©n√©r√© ({sizeKB} KB) avec {expectedElements} √©l√©ments";
        }
    }
}

<script>
    window.downloadFile = function (fileName, base64String) {
        const link = document.createElement('a');
        link.href = 'data:application/pdf;base64,' + base64String;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>