@page "/configuration"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@using GenerateurDOE.Components.Shared
@inject IConfigurationService ConfigurationService
@inject ITypeProduitService TypeProduitService
@inject ITypeDocumentImportService TypeDocumentService
@inject ITypeSectionService TypeSectionService
@inject IJSRuntime JSRuntime

<PageTitle>Configuration</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">
        <span class="oi oi-cog" aria-hidden="true"></span>
        Configuration de l'Application
    </h1>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="appSettings" OnValidSubmit="SaveConfiguration">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @statusMessage
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ClearMessage"></button>
                </div>
            }

            <div class="row">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <span class="oi oi-folder" aria-hidden="true"></span>
                                Répertoires de Stockage
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                
                                    <label for="repertoirePDF" class="form-label">Répertoire des fichiers PDF</label>
                                    <div class="input-group">
                                        <InputText @bind-Value="appSettings.RepertoireStockagePDF" 
                                                 class="form-control" id="repertoirePDF" placeholder="C:\GenerateurDOE\Documents\PDF" />
                                        <button type="button" class="btn btn-outline-info" 
                                                @onclick="() => OpenFolderExplorer(FolderType.PDF)">
                                            <span class="oi oi-folder" aria-hidden="true"></span>
                                            Parcourir
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" 
                                                @onclick="() => TestDirectoryPDF()">
                                            <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                                            Tester
                                        </button>
                                        <button type="button" class="btn btn-outline-primary" 
                                                @onclick="() => CreateDirectoryPDF()">
                                            <span class="oi oi-plus" aria-hidden="true"></span>
                                            Créer
                                        </button>
                                    </div>
                                    <ValidationMessage For="() => appSettings.RepertoireStockagePDF" class="text-danger" />
                                    @if (pdfDirectoryInfo != null)
                                    {
                                        <DirectoryStatusDisplay DirectoryInfo="pdfDirectoryInfo" />
                                    }
                            </div>

                            <div class="row mb-3">
                                <label for="repertoireImages" class="form-label">Répertoire des images</label>
                                <div class="input-group">
                                    <InputText @bind-Value="appSettings.RepertoireStockageImages" 
                                                class="form-control" id="repertoireImages" placeholder="C:\GenerateurDOE\Documents\Images" />
                                    <button type="button" class="btn btn-outline-info" 
                                            @onclick="() => OpenFolderExplorer(FolderType.Images)">
                                        <span class="oi oi-folder" aria-hidden="true"></span>
                                        Parcourir
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" 
                                            @onclick="() => TestDirectoryImages()">
                                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                                        Tester
                                    </button>
                                    <button type="button" class="btn btn-outline-primary" 
                                            @onclick="() => CreateDirectoryImages()">
                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                        Créer
                                    </button>
                                </div>
                                <ValidationMessage For="() => appSettings.RepertoireStockageImages" class="text-danger" />
                                @if (imagesDirectoryInfo != null)
                                {
                                    <DirectoryStatusDisplay DirectoryInfo="imagesDirectoryInfo" />
                                }
                            </div>

                            
                        </div>
                    </div>

                    <div class="card mt-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <span class="oi oi-building" aria-hidden="true"></span>
                                Informations de l'Entreprise
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8 mb-3">
                                    <label for="nomSociete" class="form-label">Nom de la société</label>
                                    <InputText @bind-Value="appSettings.NomSociete" 
                                             class="form-control" id="nomSociete" placeholder="Votre Société" />
                                    <ValidationMessage For="() => appSettings.NomSociete" class="text-danger" />
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="tailleMaxPDF" class="form-label">Taille max fichiers PDF</label>
                                    <InputText @bind-Value="appSettings.TailleMaxFichierPDF" 
                                             class="form-control" id="tailleMaxPDF" placeholder="50MB" />
                                    <ValidationMessage For="() => appSettings.TailleMaxFichierPDF" class="text-danger" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                                <!-- Boutons validation dossiers -->
                                <div class="d-flex justify-content-between mt-4">
                                    <button type="button" class="btn btn-secondary" @onclick="ResetToDefaults">
                                        <span class="oi oi-reload" aria-hidden="true"></span>
                                        Valeurs par défaut
                                    </button>
                                    
                                    <div>
                                        <button type="button" class="btn btn-outline-primary me-2" @onclick="TestAllDirectories">
                                            <span class="oi oi-check" aria-hidden="true"></span>
                                            Tester tout
                                        </button>
                                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                            @if (isSaving)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            <span class="oi oi-check" aria-hidden="true"></span>
                                            Enregistrer
                                        </button>
                                    </div>
                                </div>
                            </div>

                    <div class="card mt-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <span class="oi oi-tags" aria-hidden="true"></span>
                                Types de Produits
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (chargementTypes)
                            {
                                <div class="text-center">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Chargement...</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row mb-3">
                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" placeholder="Nom du nouveau type de produit..." 
                                                   @bind="nouveauTypeProduit.Nom" @onkeyup="@(async (e) => { if (((KeyboardEventArgs)e).Key == "Enter") await AjouterTypeProduit(); })" />
                                            <input type="text" class="form-control" placeholder="Description (optionnel)..." 
                                                   @bind="nouveauTypeProduit.Description" @onkeyup="@(async (e) => { if (((KeyboardEventArgs)e).Key == "Enter") await AjouterTypeProduit(); })" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <button class="btn btn-primary" @onclick="AjouterTypeProduit" disabled="@(string.IsNullOrWhiteSpace(nouveauTypeProduit.Nom) || ajoutEnCours)">
                                            @if (ajoutEnCours)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            <span class="oi oi-plus" aria-hidden="true"></span>
                                            Ajouter
                                        </button>
                                    </div>
                                </div>

                                @if (!typesProduits.Any())
                                {
                                    <div class="text-center text-muted py-4">
                                        <span class="oi oi-info" aria-hidden="true"></span>
                                        Aucun type de produit configuré.
                                    </div>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Nom</th>
                                                    <th>Description</th>
                                                    <th>Statut</th>
                                                    <th>Usage</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var type in typesProduits.OrderBy(t => t.Nom))
                                                {
                                                    <tr>
                                                        <td>
                                                            @if (typeEnEdition?.Id == type.Id)
                                                            {
                                                                <input type="text" class="form-control form-control-sm" @bind="typeEnEdition.Nom" />
                                                            }
                                                            else
                                                            {
                                                                <strong>@type.Nom</strong>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (typeEnEdition?.Id == type.Id)
                                                            {
                                                                <input type="text" class="form-control form-control-sm" @bind="typeEnEdition.Description" />
                                                            }
                                                            else
                                                            {
                                                                @type.Description
                                                            }
                                                        </td>
                                                        <td>
                                                            <span class="badge @(type.IsActive ? "bg-success" : "bg-secondary")">
                                                                @(type.IsActive ? "Actif" : "Inactif")
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-info">@type.FichesTechniques.Count</span>
                                                        </td>
                                                        <td>
                                                            @if (typeEnEdition?.Id == type.Id)
                                                            {
                                                                <div class="btn-group btn-group-sm">
                                                                    <button class="btn btn-success btn-sm" @onclick="SauvegarderTypeEdition" disabled="@isSaving">
                                                                        <span class="oi oi-check"></span>
                                                                    </button>
                                                                    <button class="btn btn-secondary btn-sm" @onclick="AnnulerEdition">
                                                                        <span class="oi oi-x"></span>
                                                                    </button>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="btn-group btn-group-sm">
                                                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => CommencerEdition(type)" title="Modifier">
                                                                        <span class="oi oi-pencil"></span>
                                                                    </button>
                                                                    <button class="btn btn-outline-@(type.IsActive ? "warning" : "success") btn-sm" 
                                                                            @onclick="() => ToggleActifType(type)" title="@(type.IsActive ? "Désactiver" : "Activer")">
                                                                        <span class="oi oi-@(type.IsActive ? "ban" : "check")"></span>
                                                                    </button>
                                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => SupprimerType(type)" 
                                                                            title="Supprimer" disabled="@(type.FichesTechniques.Count > 0)">
                                                                        <span class="oi oi-trash"></span>
                                                                    </button>
                                                                </div>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div class="card mt-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <span class="oi oi-document" aria-hidden="true"></span>
                                Types de Documents
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (chargementTypesDocuments)
                            {
                                <div class="text-center">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Chargement...</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row mb-3">
                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" placeholder="Nom du nouveau type de document..." 
                                                   @bind="nouveauTypeDocument.Nom" @onkeyup="@(async (e) => { if (((KeyboardEventArgs)e).Key == "Enter") await AjouterTypeDocument(); })" />
                                            <input type="text" class="form-control" placeholder="Description (optionnel)..." 
                                                   @bind="nouveauTypeDocument.Description" @onkeyup="@(async (e) => { if (((KeyboardEventArgs)e).Key == "Enter") await AjouterTypeDocument(); })" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <button class="btn btn-primary" @onclick="AjouterTypeDocument" disabled="@(string.IsNullOrWhiteSpace(nouveauTypeDocument.Nom) || ajoutDocumentEnCours)">
                                            @if (ajoutDocumentEnCours)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            <span class="oi oi-plus" aria-hidden="true"></span>
                                            Ajouter
                                        </button>
                                    </div>
                                </div>

                                @if (!typesDocuments.Any())
                                {
                                    <div class="text-center text-muted py-4">
                                        <span class="oi oi-info" aria-hidden="true"></span>
                                        Aucun type de document configuré.
                                    </div>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Nom</th>
                                                    <th>Description</th>
                                                    <th>Statut</th>
                                                    <th>Usage</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var type in typesDocuments.OrderBy(t => t.Nom))
                                                {
                                                    <tr>
                                                        <td>
                                                            @if (typeDocumentEnEdition?.Id == type.Id)
                                                            {
                                                                <input type="text" class="form-control form-control-sm" @bind="typeDocumentEnEdition.Nom" />
                                                            }
                                                            else
                                                            {
                                                                <strong>@type.Nom</strong>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (typeDocumentEnEdition?.Id == type.Id)
                                                            {
                                                                <input type="text" class="form-control form-control-sm" @bind="typeDocumentEnEdition.Description" />
                                                            }
                                                            else
                                                            {
                                                                @type.Description
                                                            }
                                                        </td>
                                                        <td>
                                                            <span class="badge @(type.IsActive ? "bg-success" : "bg-secondary")">
                                                                @(type.IsActive ? "Actif" : "Inactif")
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-info">0</span>
                                                        </td>
                                                        <td>
                                                            @if (typeDocumentEnEdition?.Id == type.Id)
                                                            {
                                                                <div class="btn-group btn-group-sm">
                                                                    <button class="btn btn-success btn-sm" @onclick="SauvegarderTypeDocumentEdition" disabled="@isSaving">
                                                                        <span class="oi oi-check"></span>
                                                                    </button>
                                                                    <button class="btn btn-secondary btn-sm" @onclick="AnnulerEditionDocument">
                                                                        <span class="oi oi-x"></span>
                                                                    </button>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="btn-group btn-group-sm">
                                                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => CommencerEditionDocument(type)" title="Modifier">
                                                                        <span class="oi oi-pencil"></span>
                                                                    </button>
                                                                    <button class="btn btn-outline-@(type.IsActive ? "warning" : "success") btn-sm" 
                                                                            @onclick="() => ToggleActifTypeDocument(type)" title="@(type.IsActive ? "Désactiver" : "Activer")">
                                                                        <span class="oi oi-@(type.IsActive ? "ban" : "check")"></span>
                                                                    </button>
                                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => SupprimerTypeDocument(type)" 
                                                                            title="Supprimer" disabled="false">
                                                                        <span class="oi oi-trash"></span>
                                                                    </button>
                                                                </div>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                            }
                        </div>
                    </div>


                </div>

                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <span class="oi oi-info" aria-hidden="true"></span>
                                Aide
                            </h6>
                        </div>
                        <div class="card-body">
                            <p class="card-text small">
                                <strong>Répertoires de stockage :</strong><br />
                                Spécifiez les chemins où seront stockés les fichiers PDF et les images.
                                Ces répertoires doivent être accessibles en écriture.
                            </p>
                            <p class="card-text small">
                                <strong>Taille max PDF :</strong><br />
                                Format accepté : 50MB, 100KB, 2GB
                            </p>
                            <hr />
                            <h6 class="small">Statut des répertoires</h6>
                            <div class="small">
                                <span class="badge bg-success">Disponible</span> Répertoire accessible<br />
                                <span class="badge bg-warning">Attention</span> Répertoire existe mais problème<br />
                                <span class="badge bg-danger">Erreur</span> Répertoire inaccessible
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }

    @* Modal pour l'explorateur de dossiers *@
    @if (showFolderExplorer)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <span class="oi oi-folder" aria-hidden="true"></span>
                            Sélectionner un dossier @(currentFolderType == FolderType.PDF ? "PDF" : "Images")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseFolderExplorer" aria-label="Close"></button>
                    </div>
                    <div class="modal-body p-0">
                        <FolderExplorer InitialPath="@GetCurrentPath()"
                                      OnFolderSelected="OnFolderSelected"
                                      OnCancelled="CloseFolderExplorer" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private AppSettings appSettings = new();
    private CustomDirectoryInfo? pdfDirectoryInfo;
    private CustomDirectoryInfo? imagesDirectoryInfo;
    
    private bool isLoading = true;
    private bool isSaving = false;
    private string statusMessage = string.Empty;
    private bool isSuccess = false;

    // Explorateur de dossiers
    private bool showFolderExplorer = false;
    private FolderType currentFolderType = FolderType.PDF;

    // Gestion des types de produits
    private List<TypeProduit> typesProduits = new();
    private TypeProduit nouveauTypeProduit = new();
    private TypeProduit? typeEnEdition = null;
    private bool chargementTypes = false;
    private bool ajoutEnCours = false;

    // Gestion des types de documents
    private List<TypeDocumentImport> typesDocuments = new();
    private TypeDocumentImport nouveauTypeDocument = new();
    private TypeDocumentImport? typeDocumentEnEdition = null;
    private bool chargementTypesDocuments = false;
    private bool ajoutDocumentEnCours = false;

    private enum FolderType
    {
        PDF,
        Images
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadConfiguration();
    }

    private async Task LoadConfiguration()
    {
        try
        {
            isLoading = true;
            appSettings = await ConfigurationService.GetAppSettingsAsync();
            await ChargerTypesProduits();
            await ChargerTypesDocuments();
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors du chargement : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveConfiguration()
    {
        try
        {
            isSaving = true;
            ClearMessage();

            var success = await ConfigurationService.UpdateAppSettingsAsync(appSettings);
            
            if (success)
            {
                statusMessage = "Configuration sauvegardée avec succès !";
                isSuccess = true;
            }
            else
            {
                statusMessage = "Erreur lors de la sauvegarde de la configuration.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task TestDirectoryPDF()
    {
        await TestDirectory(appSettings.RepertoireStockagePDF, "PDF");
    }

    private async Task TestDirectoryImages()
    {
        await TestDirectory(appSettings.RepertoireStockageImages, "Images");
    }

    private async Task CreateDirectoryPDF()
    {
        await CreateDirectory(appSettings.RepertoireStockagePDF, "PDF");
    }

    private async Task CreateDirectoryImages()
    {
        await CreateDirectory(appSettings.RepertoireStockageImages, "Images");
    }

    private async Task TestDirectory(string directoryPath, string type)
    {
        if (string.IsNullOrWhiteSpace(directoryPath))
            return;

        try
        {
            var info = await ConfigurationService.GetDirectoryInfoAsync(directoryPath);
            
            if (type == "PDF")
                pdfDirectoryInfo = info;
            else
                imagesDirectoryInfo = info;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors du test du répertoire {type} : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task CreateDirectory(string directoryPath, string type)
    {
        if (string.IsNullOrWhiteSpace(directoryPath))
            return;

        try
        {
            var success = await ConfigurationService.CreateDirectoryAsync(directoryPath);
            
            if (success)
            {
                statusMessage = $"Répertoire {type} créé avec succès !";
                isSuccess = true;
                await TestDirectory(directoryPath, type);
            }
            else
            {
                statusMessage = $"Impossible de créer le répertoire {type}.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors de la création du répertoire {type} : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task TestAllDirectories()
    {
        await TestDirectory(appSettings.RepertoireStockagePDF, "PDF");
        await TestDirectory(appSettings.RepertoireStockageImages, "Images");
        
        statusMessage = "Test des répertoires terminé. Vérifiez les statuts ci-dessous.";
        isSuccess = true;
    }

    private async Task ResetToDefaults()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Êtes-vous sûr de vouloir restaurer les valeurs par défaut ?");
        
        if (confirmed)
        {
            appSettings = new AppSettings
            {
                RepertoireStockagePDF = "C:\\GenerateurDOE\\Documents\\PDF",
                RepertoireStockageImages = "C:\\GenerateurDOE\\Documents\\Images",
                NomSociete = "Votre Société",
                TailleMaxFichierPDF = "50MB"
            };
            
            pdfDirectoryInfo = null;
            imagesDirectoryInfo = null;
            
            statusMessage = "Configuration restaurée aux valeurs par défaut.";
            isSuccess = true;
        }
    }

    private void ClearMessage()
    {
        statusMessage = string.Empty;
    }

    // Méthodes pour l'explorateur de dossiers
    private void OpenFolderExplorer(FolderType folderType)
    {
        currentFolderType = folderType;
        showFolderExplorer = true;
    }

    private void CloseFolderExplorer()
    {
        showFolderExplorer = false;
    }

    private string GetCurrentPath()
    {
        return currentFolderType switch
        {
            FolderType.PDF => appSettings.RepertoireStockagePDF,
            FolderType.Images => appSettings.RepertoireStockageImages,
            _ => string.Empty
        };
    }

    private async Task OnFolderSelected(string selectedPath)
    {
        switch (currentFolderType)
        {
            case FolderType.PDF:
                appSettings.RepertoireStockagePDF = selectedPath;
                await TestDirectoryPDF();
                break;
            case FolderType.Images:
                appSettings.RepertoireStockageImages = selectedPath;
                await TestDirectoryImages();
                break;
        }

        CloseFolderExplorer();
        statusMessage = $"Dossier {currentFolderType} sélectionné : {selectedPath}";
        isSuccess = true;
    }

    // Méthodes pour la gestion des types de produits
    private async Task ChargerTypesProduits()
    {
        try
        {
            chargementTypes = true;
            typesProduits = (await TypeProduitService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors du chargement des types de produits : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            chargementTypes = false;
        }
    }

    private async Task AjouterTypeProduit()
    {
        if (string.IsNullOrWhiteSpace(nouveauTypeProduit.Nom))
            return;

        ajoutEnCours = true;
        try
        {
            if (await TypeProduitService.ExistsAsync(nouveauTypeProduit.Nom))
            {
                statusMessage = "Ce type de produit existe déjà.";
                isSuccess = false;
                return;
            }

            await TypeProduitService.CreateAsync(nouveauTypeProduit);
            nouveauTypeProduit = new TypeProduit();
            await ChargerTypesProduits();
            
            statusMessage = "Type de produit ajouté avec succès !";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors de l'ajout : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            ajoutEnCours = false;
        }
    }

    private void CommencerEdition(TypeProduit type)
    {
        typeEnEdition = new TypeProduit
        {
            Id = type.Id,
            Nom = type.Nom,
            Description = type.Description,
            IsActive = type.IsActive
        };
    }

    private void AnnulerEdition()
    {
        typeEnEdition = null;
    }

    private async Task SauvegarderTypeEdition()
    {
        if (typeEnEdition == null || string.IsNullOrWhiteSpace(typeEnEdition.Nom))
            return;

        try
        {
            var success = await TypeProduitService.UpdateAsync(typeEnEdition);
            if (success)
            {
                await ChargerTypesProduits();
                typeEnEdition = null;
                statusMessage = "Type de produit modifié avec succès !";
                isSuccess = true;
            }
            else
            {
                statusMessage = "Erreur lors de la modification.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors de la modification : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task ToggleActifType(TypeProduit type)
    {
        try
        {
            var success = await TypeProduitService.ToggleActiveAsync(type.Id);
            if (success)
            {
                await ChargerTypesProduits();
                statusMessage = $"Type de produit {(type.IsActive ? "désactivé" : "activé")} avec succès !";
                isSuccess = true;
            }
            else
            {
                statusMessage = "Erreur lors du changement de statut.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task SupprimerType(TypeProduit type)
    {
        if (!await TypeProduitService.CanDeleteAsync(type.Id))
        {
            statusMessage = "Impossible de supprimer ce type : il est utilisé par des fiches techniques.";
            isSuccess = false;
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Êtes-vous sûr de vouloir supprimer le type '{type.Nom}' ?");
        
        if (confirmed)
        {
            try
            {
                var success = await TypeProduitService.DeleteAsync(type.Id);
                if (success)
                {
                    await ChargerTypesProduits();
                    statusMessage = "Type de produit supprimé avec succès !";
                    isSuccess = true;
                }
                else
                {
                    statusMessage = "Erreur lors de la suppression.";
                    isSuccess = false;
                }
            }
            catch (Exception ex)
            {
                statusMessage = $"Erreur lors de la suppression : {ex.Message}";
                isSuccess = false;
            }
        }
    }

    // Méthodes pour la gestion des types de documents
    private async Task ChargerTypesDocuments()
    {
        try
        {
            chargementTypesDocuments = true;
            typesDocuments = (await TypeDocumentService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors du chargement des types de documents : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            chargementTypesDocuments = false;
        }
    }

    private async Task AjouterTypeDocument()
    {
        if (string.IsNullOrWhiteSpace(nouveauTypeDocument.Nom))
            return;

        ajoutDocumentEnCours = true;
        try
        {
            if (await TypeDocumentService.ExistsAsync(nouveauTypeDocument.Nom))
            {
                statusMessage = "Ce type de document existe déjà.";
                isSuccess = false;
                return;
            }

            await TypeDocumentService.CreateAsync(nouveauTypeDocument);
            nouveauTypeDocument = new TypeDocumentImport();
            await ChargerTypesDocuments();
            
            statusMessage = "Type de document ajouté avec succès !";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors de l'ajout : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            ajoutDocumentEnCours = false;
        }
    }

    private void CommencerEditionDocument(TypeDocumentImport type)
    {
        typeDocumentEnEdition = new TypeDocumentImport
        {
            Id = type.Id,
            Nom = type.Nom,
            Description = type.Description,
            IsActive = type.IsActive
        };
    }

    private void AnnulerEditionDocument()
    {
        typeDocumentEnEdition = null;
    }

    private async Task SauvegarderTypeDocumentEdition()
    {
        if (typeDocumentEnEdition == null || string.IsNullOrWhiteSpace(typeDocumentEnEdition.Nom))
            return;

        try
        {
            var success = await TypeDocumentService.UpdateAsync(typeDocumentEnEdition);
            if (success)
            {
                await ChargerTypesDocuments();
                typeDocumentEnEdition = null;
                statusMessage = "Type de document modifié avec succès !";
                isSuccess = true;
            }
            else
            {
                statusMessage = "Erreur lors de la modification.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors de la modification : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task ToggleActifTypeDocument(TypeDocumentImport type)
    {
        try
        {
            var success = await TypeDocumentService.ToggleActiveAsync(type.Id);
            if (success)
            {
                await ChargerTypesDocuments();
                statusMessage = $"Type de document {(type.IsActive ? "désactivé" : "activé")} avec succès !";
                isSuccess = true;
            }
            else
            {
                statusMessage = "Erreur lors du changement de statut.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task SupprimerTypeDocument(TypeDocumentImport type)
    {
        if (!await TypeDocumentService.CanDeleteAsync(type.Id))
        {
            statusMessage = "Impossible de supprimer ce type : il est utilisé par des documents PDF.";
            isSuccess = false;
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Êtes-vous sûr de vouloir supprimer le type '{type.Nom}' ?");
        
        if (confirmed)
        {
            try
            {
                var success = await TypeDocumentService.DeleteAsync(type.Id);
                if (success)
                {
                    await ChargerTypesDocuments();
                    statusMessage = "Type de document supprimé avec succès !";
                    isSuccess = true;
                }
                else
                {
                    statusMessage = "Erreur lors de la suppression.";
                    isSuccess = false;
                }
            }
            catch (Exception ex)
            {
                statusMessage = $"Erreur lors de la suppression : {ex.Message}";
                isSuccess = false;
            }
        }
    }
}