@page "/sections-libres"
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@using GenerateurDOE.Components.Shared
@using Microsoft.AspNetCore.WebUtilities
@inject ISectionLibreService SectionLibreService
@inject ITypeSectionService TypeSectionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Sections Libres</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">
        <span class="oi oi-text" aria-hidden="true"></span>
        Gestion des Sections Libres
    </h1>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                @statusMessage
                <button type="button" class="btn-close" aria-label="Close" @onclick="ClearMessage"></button>
            </div>
        }

        <!-- Filtres -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="filtreType" class="form-label">Filtrer par type</label>
                        <select @bind="filtreTypeSelectionne" @bind:after="AppliquerFiltres" class="form-select" id="filtreType">
                            <option value="0">-- Tous les types --</option>
                            @foreach (var type in typesSections.Where(t => t.IsActive))
                            {
                                <option value="@type.Id">@type.Nom</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="rechercheGlobale" class="form-label">Recherche globale</label>
                        <AutoComplete T="SectionLibre" 
                                    Items="sectionsRecherche"
                                    DisplaySelector="s => s.Titre"
                                    Value="@rechercheTexte"
                                    OnTextChanged="OnRechercheTextChanged"
                                    OnItemSelected="OnSectionSelectionnee"
                                    Placeholder="Rechercher dans le titre ou contenu..."
                                    MinSearchLength="2"
                                    CssClass="form-control" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label d-block">&nbsp;</label>
                        <div class="d-grid gap-2 d-md-block">
                            <button type="button" class="btn btn-outline-secondary" @onclick="ReinitialiserFiltres">
                                <span class="oi oi-reload" aria-hidden="true"></span>
                                Reset
                            </button>
                            <button type="button" class="btn btn-primary" @onclick="OuvrirModalNouvelleSection">
                                <span class="oi oi-plus" aria-hidden="true"></span>
                                Nouvelle Section
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Liste des sections -->
        <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <span class="oi oi-list" aria-hidden="true"></span>
                            Liste des Sections (@sectionsFiltrees.Count)
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (chargementSections)
                        {
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                            </div>
                        }
                        else if (!sectionsFiltrees.Any())
                        {
                            <div class="text-center text-muted py-4">
                                <span class="oi oi-info" aria-hidden="true"></span>
                                <p class="mb-0">Aucune section créée pour le moment.</p>
                                <small>Créez votre première section avec le formulaire ci-contre.</small>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Ordre</th>
                                            <th>Titre</th>
                                            <th>Type</th>
                                            <th>Modifié le</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var section in sectionsFiltrees.OrderBy(s => s.Ordre))
                                        {
                                            <tr class="@(sectionEnEdition?.Id == section.Id ? "table-warning" : "")">
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <span class="badge bg-primary me-2">@(section.Ordre)</span>
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-outline-secondary btn-sm"
                                                                    @onclick="() => DeplacerSection(section, true)"
                                                                    disabled="@(section.Ordre == 1)"
                                                                    title="Monter">
                                                                <span class="oi oi-arrow-top"></span>
                                                            </button>
                                                            <button type="button" class="btn btn-outline-secondary btn-sm"
                                                                    @onclick="() => DeplacerSection(section, false)"
                                                                    disabled="@(section.Ordre == sections.Count)"
                                                                    title="Descendre">
                                                                <span class="oi oi-arrow-bottom"></span>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div>
                                                        <strong>@(section.Titre)</strong>
                                                        @if (!string.IsNullOrWhiteSpace(section.ContenuHtml))
                                                        {
                                                            <div class="mt-1">
                                                                <small class="text-muted fw-bold">Aperçu :</small>
                                                                <div class="border rounded p-2 mt-1 section-preview-main">
                                                                    @((MarkupString)TronquerHtmlProprement(section.ContenuHtml, 150))
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@(section.TypeSection.Nom)</span>
                                                </td>
                                                <td>@(section.DateModification.ToString("dd/MM/yyyy HH:mm"))</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button type="button" class="btn btn-outline-primary" 
                                                                @onclick="() => OuvrirModalModifierSection(section)" title="Modifier">
                                                            <span class="oi oi-pencil"></span>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger" 
                                                                @onclick="() => SupprimerSection(section)" title="Supprimer">
                                                            <span class="oi oi-trash"></span>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
        }
    
</div>

<!-- Modal pour l'édition -->
<div class="modal fade @(afficherModal ? "show d-block" : "")" tabindex="-1" role="dialog" style="@(afficherModal ? "background-color: rgba(0,0,0,0.5);" : "display: none;")">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <span class="oi oi-@(sectionEnEdition != null ? "pencil" : "plus")" aria-hidden="true"></span>
                    @(sectionEnEdition != null ? "Modifier Section" : "Nouvelle Section")
                </h5>
                <button type="button" class="btn-close" @onclick="FermerModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="sectionCourante" OnValidSubmit="SauvegarderSection">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="titre" class="form-label">Titre de la section</label>
                                <InputText @bind-Value="sectionCourante.Titre" 
                                         class="form-control" id="titre" placeholder="Titre de la section" />
                                <ValidationMessage For="() => sectionCourante.Titre" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="typeSection" class="form-label">Type de section</label>
                                <InputSelect @bind-Value="sectionCourante.TypeSectionId" class="form-select" id="typeSection">
                                    <option value="0">-- Sélectionner un type --</option>
                                    @foreach (var type in typesSections.Where(t => t.IsActive))
                                    {
                                        <option value="@type.Id">@type.Nom</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => sectionCourante.TypeSectionId" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="ordre" class="form-label">Ordre d'affichage</label>
                                <InputNumber @bind-Value="sectionCourante.Ordre" 
                                           class="form-control" id="ordre" />
                                <ValidationMessage For="() => sectionCourante.Ordre" class="text-danger" />
                                <small class="form-text text-muted">Laisser à 0 pour placer automatiquement à la fin</small>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="contenu" class="form-label">Contenu de la section</label>
                        <RichTextEditor @bind-Value="sectionCourante.ContenuHtml"
                                      Placeholder="Saisissez le contenu de votre section..."
                                      Height="400px"
                                      CssClass="border" />
                        <small class="form-text text-muted mt-2">
                            Utilisez la barre d'outils pour formater votre texte, insérer des images et des liens.
                        </small>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(sectionCourante.ContenuHtml))
                    {
                        <div class="mb-3">
                            <strong>Aperçu :</strong>
                            <div class="border p-3 bg-light" style="max-height: 200px; overflow-y: auto;">
                                @((MarkupString)sectionCourante.ContenuHtml)
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
            <div class="modal-footer">
                <div class="d-flex justify-content-between w-100">
                    <div>
                        @if (sectionEnEdition != null)
                        {
                            <button type="button" class="btn btn-danger" @onclick="SupprimerSectionCourante">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                                Supprimer cette section
                            </button>
                        }
                    </div>
                    <div>
                        <button type="button" class="btn btn-secondary me-2" @onclick="FermerModal">
                            <span class="oi oi-x" aria-hidden="true"></span>
                            Annuler
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="SauvegarderSection" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <span class="oi oi-@(sectionEnEdition != null ? "check" : "plus")" aria-hidden="true"></span>
                            @(sectionEnEdition != null ? "Modifier" : "Créer")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<SectionLibre> sections = new();
    private List<TypeSection> typesSections = new();
    private SectionLibre sectionCourante = new();
    private SectionLibre? sectionEnEdition = null;

    private bool isLoading = true;
    private bool isSaving = false;
    private bool chargementSections = false;
    private string statusMessage = string.Empty;
    private bool isSuccess = false;

    // Variables pour le filtrage et la modal
    private List<SectionLibre> sectionsFiltrees = new();
    private List<SectionLibre> sectionsRecherche = new();
    private int filtreTypeSelectionne = 0;
    private string rechercheTexte = string.Empty;
    private bool afficherModal = false;

    protected override async Task OnInitializedAsync()
    {
        await ChargerDonnees();

        // Vérifier si on doit ouvrir le modal de création automatiquement
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("action", out var action)
            && action == "nouveau")
        {
            // Petit délai pour s'assurer que la page est entièrement rendue
            await Task.Delay(100);
            OuvrirModalNouvelleSection();
        }
    }

    private async Task ChargerDonnees()
    {
        try
        {
            isLoading = true;
            chargementSections = true;
            
            // Load sequentially to avoid DbContext threading issues
            sections = (await SectionLibreService.GetAllAsync()).ToList();
            typesSections = (await TypeSectionService.GetActiveAsync()).ToList();
            
            // Initialiser les sections filtrées et de recherche
            sectionsFiltrees = sections.ToList();
            sectionsRecherche = sections.ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors du chargement : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            chargementSections = false;
        }
    }

    private async Task SauvegarderSection()
    {
        try
        {
            isSaving = true;
            ClearMessage();

            // Le contenu HTML est déjà dans sectionCourante.ContenuHtml grâce au @bind-Value
            var htmlContent = sectionCourante.ContenuHtml ?? "";
            var jsonContent = ""; // Pas besoin de JSON pour l'approche HTML simple

            sectionCourante.ContenuHtml = htmlContent;
            sectionCourante.ContenuJson = jsonContent;

            if (sectionEnEdition != null)
            {
                // Mise à jour
                sectionCourante.Id = sectionEnEdition.Id;
                await SectionLibreService.UpdateAsync(sectionCourante);
                statusMessage = "Section modifiée avec succès !";
                sectionEnEdition = null;
            }
            else
            {
                // Création
                await SectionLibreService.CreateAsync(sectionCourante);
                statusMessage = "Section créée avec succès !";
            }

            isSuccess = true;
            await ChargerDonnees();
            FermerModal();
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors de la sauvegarde : {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isSaving = false;
        }
    }


    private async Task SupprimerSection(SectionLibre section)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Êtes-vous sûr de vouloir supprimer la section '{section.Titre}' ?");
        
        if (confirmed)
        {
            try
            {
                var success = await SectionLibreService.DeleteAsync(section.Id);
                if (success)
                {
                    await ChargerDonnees();
                    statusMessage = "Section supprimée avec succès !";
                    isSuccess = true;
                    
                    // Si on était en train d'éditer cette section, fermer la modal
                    if (sectionEnEdition?.Id == section.Id)
                    {
                        FermerModal();
                    }
                }
                else
                {
                    statusMessage = "Erreur lors de la suppression.";
                    isSuccess = false;
                }
            }
            catch (Exception ex)
            {
                statusMessage = $"Erreur lors de la suppression : {ex.Message}";
                isSuccess = false;
            }
        }
    }

    private async Task SupprimerSectionCourante()
    {
        if (sectionEnEdition != null)
        {
            await SupprimerSection(sectionEnEdition);
        }
    }

    private async Task DeplacerSection(SectionLibre section, bool monter)
    {
        try
        {
            var nouvelOrdre = monter ? section.Ordre - 1 : section.Ordre + 1;
            var success = await SectionLibreService.ReorderAsync(section.Id, nouvelOrdre);
            
            if (success)
            {
                await ChargerDonnees();
                statusMessage = $"Section {(monter ? "montée" : "descendue")} avec succès !";
                isSuccess = true;
            }
            else
            {
                statusMessage = "Erreur lors du déplacement.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Erreur lors du déplacement : {ex.Message}";
            isSuccess = false;
        }
    }

    // Méthodes pour le filtrage
    private void AppliquerFiltres()
    {
        var sectionsTemp = sections.AsEnumerable();

        // Filtre par type
        if (filtreTypeSelectionne > 0)
        {
            sectionsTemp = sectionsTemp.Where(s => s.TypeSectionId == filtreTypeSelectionne);
        }

        // Filtre par recherche texte
        if (!string.IsNullOrWhiteSpace(rechercheTexte))
        {
            sectionsTemp = sectionsTemp.Where(s => 
                s.Titre.Contains(rechercheTexte, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(s.ContenuHtml) && s.ContenuHtml.Contains(rechercheTexte, StringComparison.OrdinalIgnoreCase)));
        }

        sectionsFiltrees = sectionsTemp.ToList();
        StateHasChanged();
    }

    private void OnRechercheTextChanged(string texte)
    {
        rechercheTexte = texte;
        
        // Filtrer les sections pour l'autocomplétion
        if (!string.IsNullOrWhiteSpace(texte) && texte.Length >= 2)
        {
            sectionsRecherche = sections.Where(s => 
                s.Titre.Contains(texte, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(s.ContenuHtml) && s.ContenuHtml.Contains(texte, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
        else
        {
            sectionsRecherche = sections.ToList();
        }
        
        AppliquerFiltres();
    }

    private void OnSectionSelectionnee(SectionLibre section)
    {
        // Optionnel : faire quelque chose quand une section est sélectionnée dans l'autocomplétion
        // Par exemple, naviguer vers cette section ou la mettre en surbrillance
    }

    private void ReinitialiserFiltres()
    {
        filtreTypeSelectionne = 0;
        rechercheTexte = string.Empty;
        sectionsFiltrees = sections.ToList();
        sectionsRecherche = sections.ToList();
        StateHasChanged();
    }

    // Méthodes pour la modal
    private void OuvrirModalNouvelleSection()
    {
        sectionEnEdition = null;
        sectionCourante = new SectionLibre();
        afficherModal = true;
    }

    private void OuvrirModalModifierSection(SectionLibre section)
    {
        sectionEnEdition = section;
        sectionCourante = new SectionLibre
        {
            Id = section.Id,
            Titre = section.Titre,
            Ordre = section.Ordre,
            TypeSectionId = section.TypeSectionId,
            ContenuHtml = section.ContenuHtml,
            ContenuJson = section.ContenuJson
        };
        afficherModal = true;
    }

    private void FermerModal()
    {
        afficherModal = false;
        sectionEnEdition = null;
        sectionCourante = new SectionLibre();
    }

    private void ClearMessage()
    {
        statusMessage = string.Empty;
    }

    private string TronquerHtmlProprement(string html, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(html))
            return string.Empty;

        // Supprimer les balises HTML pour avoir le texte pur pour la limite
        var texteSansBalises = System.Text.RegularExpressions.Regex.Replace(html, "<.*?>", string.Empty);

        if (texteSansBalises.Length <= maxLength)
            return html; // Retourner le HTML complet si le texte est court

        // Si le texte est trop long, tronquer intelligemment
        var texteTronque = texteSansBalises.Substring(0, maxLength);
        var positionDernierEspace = texteTronque.LastIndexOf(' ');

        if (positionDernierEspace > 0)
            texteTronque = texteTronque.Substring(0, positionDernierEspace);

        // Maintenant tronquer le HTML original en essayant de garder les balises cohérentes
        var htmlTronque = TronquerHtmlAvecBalises(html, texteTronque.Length);

        return htmlTronque + "...";
    }

    private string TronquerHtmlAvecBalises(string html, int maxTextLength)
    {
        var textLength = 0;
        var result = "";
        var inTag = false;

        for (int i = 0; i < html.Length && textLength < maxTextLength; i++)
        {
            var c = html[i];

            if (c == '<')
                inTag = true;
            else if (c == '>')
                inTag = false;
            else if (!inTag)
                textLength++;

            result += c;
        }

        return result;
    }
}

<style>
    .section-preview-main {
        max-height: 4em;
        overflow-y: auto;
        background-color: #f8f9fa;
        font-size: 0.8rem;
        line-height: 1.3;
        max-width: 400px;
    }

    .section-preview-main * {
        margin: 0.1em 0;
        font-size: inherit !important;
    }

    .section-preview-main img {
        max-width: 100%;
        height: auto;
        max-height: 2em;
    }

    .table td {
        vertical-align: top;
    }
</style>