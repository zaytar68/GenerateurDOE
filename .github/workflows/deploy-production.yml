# ===================================================================
# GitHub Actions - D√©ploiement Production G√©n√©rateur DOE
# ===================================================================
# Workflow automatis√© : Build ‚Üí Push GHCR ‚Üí Webhook Portainer
# D√©clenchement : Push sur branche 'production'
# ===================================================================

name: üöÄ Deploy to Production

on:
  push:
    branches:
      - production
  workflow_dispatch: # Permet d√©clenchement manuel

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===================================================================
  # Job 1: Extract Version from .csproj
  # ===================================================================
  extract-version:
    name: üì¶ Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from .csproj
        id: get-version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" GenerateurDOE.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Version d√©tect√©e: $VERSION"

  # ===================================================================
  # Job 2: Build and Push Docker Image
  # ===================================================================
  build-and-push:
    name: üèóÔ∏è Build & Push Docker
    runs-on: ubuntu-latest
    needs: extract-version
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ needs.extract-version.outputs.version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.extract-version.outputs.version }}

      - name: üìã Image tags published
        run: |
          echo "‚úÖ Images Docker publi√©es:"
          echo "${{ steps.meta.outputs.tags }}"

  # ===================================================================
  # Job 3: Notification - Image Ready for Manual Deployment
  # ===================================================================
  notify-image-ready:
    name: üì¢ Notify Image Ready
    runs-on: ubuntu-latest
    needs: [extract-version, build-and-push]

    steps:
      - name: Image ready for deployment
        run: |
          echo "‚úÖ Image Docker pr√™te pour d√©ploiement !"
          echo "üì¶ Version: v${{ needs.extract-version.outputs.version }}"
          echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "üéØ Prochaines √©tapes manuelles:"
          echo "1. Ouvrir Portainer: http://192.168.0.8:9000"
          echo "2. Aller dans Stacks ‚Üí generateur-doe-production"
          echo "3. Cliquer sur 'Update the stack'"
          echo "4. Cocher 'Re-pull image'"
          echo "5. Cliquer sur 'Update'"
          echo ""
          echo "‚è±Ô∏è L'application red√©marrera en 1-2 minutes"

  # ===================================================================
  # Job 4: Create Git Tag
  # ===================================================================
  create-tag:
    name: üè∑Ô∏è Create Git Tag
    runs-on: ubuntu-latest
    needs: [extract-version, notify-image-ready]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          TAG="v$VERSION"

          # V√©rifier si le tag existe d√©j√†
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $TAG existe d√©j√†, mise √† jour..."
            git tag -d "$TAG"
            git push origin ":refs/tags/$TAG"
          fi

          # Cr√©er le tag
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$TAG" -m "Release version $VERSION - D√©ploiement production"
          git push origin "$TAG"

          echo "‚úÖ Tag $TAG cr√©√© et pouss√©"

  # ===================================================================
  # Job 5: Cleanup old images
  # ===================================================================
  cleanup-old-images:
    name: üßπ Cleanup Old Images
    runs-on: ubuntu-latest
    needs: create-tag
    permissions:
      packages: write

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 4
          ignore-versions: '^(latest|v\d+\.\d+\.\d+)$'

      - name: Cleanup summary
        run: |
          echo "üßπ Nettoyage termin√©"
          echo "üì¶ Conservation: 4 derni√®res versions + latest"
          echo "üóëÔ∏è Anciennes images SHA supprim√©es"

# ===================================================================
# Notifications (optionnel)
# ===================================================================
  notify-success:
    name: üì¢ Notification Success
    runs-on: ubuntu-latest
    needs: [extract-version, cleanup-old-images]
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "‚úÖ Build r√©ussi! Image pr√™te pour d√©ploiement manuel"
          echo "üì¶ Version: v${{ needs.extract-version.outputs.version }}"
          echo "üè∑Ô∏è Tag Git cr√©√©: v${{ needs.extract-version.outputs.version }}"
          echo "üê≥ Image GHCR: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.extract-version.outputs.version }}"
          echo ""
          echo "üéØ Action requise:"
          echo "Ouvrez Portainer (http://192.168.0.8:9000) et cliquez sur 'Update stack' pour d√©ployer"

          # D√©commentez pour ajouter une notification Slack/Discord
          # - name: Slack Notification
          #   uses: slackapi/slack-github-action@v1
          #   with:
          #     payload: |
          #       {
          #         "text": "‚úÖ G√©n√©rateur DOE v${{ needs.extract-version.outputs.version }} d√©ploy√© en production!"
          #       }
          #   env:
          #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: üì¢ Notification Failure
    runs-on: ubuntu-latest
    needs: [extract-version, build-and-push, notify-image-ready]
    if: failure()

    steps:
      - name: Failure notification
        run: |
          echo "‚ùå √âchec du build!"
          echo "üì¶ Version tent√©e: v${{ needs.extract-version.outputs.version }}"
          echo "üîç V√©rifiez les logs ci-dessus pour diagnostiquer le probl√®me"
          echo "‚ö†Ô∏è L'image Docker n'a pas √©t√© publi√©e sur GHCR"
