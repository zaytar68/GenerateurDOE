// <auto-generated />
using System;
using GenerateurDOE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GenerateurDOE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251027160423_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("DocumentGenereFicheTechnique", b =>
                {
                    b.Property<int>("DocumentGenereId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FicheTechniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DocumentGenereId", "FicheTechniqueId");

                    b.HasIndex("FicheTechniqueId");

                    b.ToTable("DocumentGenereFicheTechniques", (string)null);
                });

            modelBuilder.Entity("GenerateurDOE.Models.Chantier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("EstArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("MaitreOeuvre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaitreOuvrage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomProjet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Chantiers");
                });

            modelBuilder.Entity("GenerateurDOE.Models.DocumentGenere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChantierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheminFichier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("EnCours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("FormatExport")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludePageDeGarde")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeTableMatieres")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IntituleLot")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomFichier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroLot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PageGardeTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parametres")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeDocument")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChantierId");

                    b.HasIndex("PageGardeTemplateId");

                    b.ToTable("DocumentsGeneres");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FTConteneur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AfficherTableauRecapitulatif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DocumentGenereId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ordre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentGenereId")
                        .IsUnique();

                    b.ToTable("FTConteneurs");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FTElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FTConteneursId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FicheTechniqueId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImportPDFId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumeroPage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ordre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PositionMarche")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FTConteneursId");

                    b.HasIndex("FicheTechniqueId");

                    b.HasIndex("ImportPDFId");

                    b.ToTable("FTElements");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FicheTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChantierId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomFabricant")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomProduit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeProduit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TypeProduitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChantierId");

                    b.HasIndex("TypeProduitId");

                    b.ToTable("FichesTechniques");
                });

            modelBuilder.Entity("GenerateurDOE.Models.ImageMethode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheminFichier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("MethodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomFichierOriginal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdreAffichage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MethodeId");

                    b.ToTable("ImagesMethode");
                });

            modelBuilder.Entity("GenerateurDOE.Models.ImportPDF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheminFichier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FicheTechniqueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomFichierOriginal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PageCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TailleFichier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeDocumentImportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FicheTechniqueId");

                    b.HasIndex("TypeDocumentImportId");

                    b.ToTable("ImportsPDF");
                });

            modelBuilder.Entity("GenerateurDOE.Models.Methode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdreAffichage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Methodes");
                });

            modelBuilder.Entity("GenerateurDOE.Models.PageGardeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContenuHtml")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("ContenuJson")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstParDefaut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.ToTable("PageGardeTemplates");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionConteneur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DocumentGenereId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ordre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeSectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeSectionId");

                    b.HasIndex("DocumentGenereId", "TypeSectionId")
                        .IsUnique()
                        .HasDatabaseName("IX_SectionConteneur_DocumentGenere_TypeSection");

                    b.ToTable("SectionsConteneurs");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionConteneurItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContenuHtmlPersonnalise")
                        .HasMaxLength(2147483647)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateModificationPersonnalisation")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionConteneursId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionLibreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TitrePersonnalise")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SectionLibreId");

                    b.HasIndex("SectionConteneursId", "SectionLibreId")
                        .IsUnique();

                    b.ToTable("SectionConteneurItems");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionLibre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContenuHtml")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("ContenuJson")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Ordre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeSectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeSectionId");

                    b.ToTable("SectionsLibres");
                });

            modelBuilder.Entity("GenerateurDOE.Models.TypeDocumentImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypesDocuments");
                });

            modelBuilder.Entity("GenerateurDOE.Models.TypeProduit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypesProduits");
                });

            modelBuilder.Entity("GenerateurDOE.Models.TypeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypesSections");
                });

            modelBuilder.Entity("DocumentGenereFicheTechnique", b =>
                {
                    b.HasOne("GenerateurDOE.Models.DocumentGenere", null)
                        .WithMany()
                        .HasForeignKey("DocumentGenereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.FicheTechnique", null)
                        .WithMany()
                        .HasForeignKey("FicheTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenerateurDOE.Models.DocumentGenere", b =>
                {
                    b.HasOne("GenerateurDOE.Models.Chantier", "Chantier")
                        .WithMany("DocumentsGeneres")
                        .HasForeignKey("ChantierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.PageGardeTemplate", "PageGardeTemplate")
                        .WithMany()
                        .HasForeignKey("PageGardeTemplateId");

                    b.Navigation("Chantier");

                    b.Navigation("PageGardeTemplate");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FTConteneur", b =>
                {
                    b.HasOne("GenerateurDOE.Models.DocumentGenere", "DocumentGenere")
                        .WithOne("FTConteneur")
                        .HasForeignKey("GenerateurDOE.Models.FTConteneur", "DocumentGenereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentGenere");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FTElement", b =>
                {
                    b.HasOne("GenerateurDOE.Models.FTConteneur", "FTConteneur")
                        .WithMany("Elements")
                        .HasForeignKey("FTConteneursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.FicheTechnique", "FicheTechnique")
                        .WithMany()
                        .HasForeignKey("FicheTechniqueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.ImportPDF", "ImportPDF")
                        .WithMany()
                        .HasForeignKey("ImportPDFId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FTConteneur");

                    b.Navigation("FicheTechnique");

                    b.Navigation("ImportPDF");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FicheTechnique", b =>
                {
                    b.HasOne("GenerateurDOE.Models.Chantier", null)
                        .WithMany("FichesTechniques")
                        .HasForeignKey("ChantierId");

                    b.HasOne("GenerateurDOE.Models.TypeProduit", null)
                        .WithMany("FichesTechniques")
                        .HasForeignKey("TypeProduitId");
                });

            modelBuilder.Entity("GenerateurDOE.Models.ImageMethode", b =>
                {
                    b.HasOne("GenerateurDOE.Models.Methode", "Methode")
                        .WithMany("Images")
                        .HasForeignKey("MethodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Methode");
                });

            modelBuilder.Entity("GenerateurDOE.Models.ImportPDF", b =>
                {
                    b.HasOne("GenerateurDOE.Models.FicheTechnique", "FicheTechnique")
                        .WithMany("ImportsPDF")
                        .HasForeignKey("FicheTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.TypeDocumentImport", "TypeDocumentImport")
                        .WithMany()
                        .HasForeignKey("TypeDocumentImportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FicheTechnique");

                    b.Navigation("TypeDocumentImport");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionConteneur", b =>
                {
                    b.HasOne("GenerateurDOE.Models.DocumentGenere", "DocumentGenere")
                        .WithMany("SectionsConteneurs")
                        .HasForeignKey("DocumentGenereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.TypeSection", "TypeSection")
                        .WithMany()
                        .HasForeignKey("TypeSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentGenere");

                    b.Navigation("TypeSection");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionConteneurItem", b =>
                {
                    b.HasOne("GenerateurDOE.Models.SectionConteneur", "SectionConteneur")
                        .WithMany("Items")
                        .HasForeignKey("SectionConteneursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenerateurDOE.Models.SectionLibre", "SectionLibre")
                        .WithMany()
                        .HasForeignKey("SectionLibreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionConteneur");

                    b.Navigation("SectionLibre");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionLibre", b =>
                {
                    b.HasOne("GenerateurDOE.Models.TypeSection", "TypeSection")
                        .WithMany("SectionsLibres")
                        .HasForeignKey("TypeSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeSection");
                });

            modelBuilder.Entity("GenerateurDOE.Models.Chantier", b =>
                {
                    b.Navigation("DocumentsGeneres");

                    b.Navigation("FichesTechniques");
                });

            modelBuilder.Entity("GenerateurDOE.Models.DocumentGenere", b =>
                {
                    b.Navigation("FTConteneur");

                    b.Navigation("SectionsConteneurs");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FTConteneur", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("GenerateurDOE.Models.FicheTechnique", b =>
                {
                    b.Navigation("ImportsPDF");
                });

            modelBuilder.Entity("GenerateurDOE.Models.Methode", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("GenerateurDOE.Models.SectionConteneur", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GenerateurDOE.Models.TypeProduit", b =>
                {
                    b.Navigation("FichesTechniques");
                });

            modelBuilder.Entity("GenerateurDOE.Models.TypeSection", b =>
                {
                    b.Navigation("SectionsLibres");
                });
#pragma warning restore 612, 618
        }
    }
}
