@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@inject IDocumentDownloadService documentDownloadService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime

<button class="btn btn-outline-primary btn-sm @CssClass"
        @onclick="() => TelechargerDocument(Document)"
        disabled="@isLoading"
        title="@Tooltip">
    @if (isLoading)
    {
        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
    }
    else
    {
        @ChildContent
    }
</button>

@code {
    [Parameter] public DocumentGenere Document { get; set; } = null!;
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Tooltip { get; set; } = "Télécharger";
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool isLoading = false;

    private async Task TelechargerDocument(DocumentGenere document)
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            NotificationService.Notify(Radzen.NotificationSeverity.Info, "Génération", "Génération du document en cours...");

            // Utilisation du service factorisé pour la génération
            var result = await documentDownloadService.PrepareDocumentForDownloadAsync(document.Id);

            if (!result.Success)
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", result.ErrorMessage);
                return;
            }

            // Téléchargement automatique du fichier
            var base64 = Convert.ToBase64String(result.FileBytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", result.FileName, base64, result.MimeType);

            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Téléchargement", $"Téléchargement de {result.FileName} démarré");
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", $"Erreur lors de la génération: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] DocumentDownloadButton error (masqué): {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}