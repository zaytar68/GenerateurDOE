@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@inject ISectionConteneurService sectionConteneurService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService

<div class="section-selection-dialog">
    <div class="dialog-header">
        <h5 class="mb-3">
            <span class="oi oi-list-rich" aria-hidden="true"></span>
            Sélectionner les sections à ajouter
        </h5>
        <p class="text-muted">
            Type de section : <strong>@TypeSectionNom</strong>
        </p>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (!sectionsDisponibles.Any())
    {
        <div class="text-center py-4 text-muted">
            <span class="oi oi-info" style="font-size: 2rem; opacity: 0.3;"></span>
            <p class="mt-2">Aucune section disponible pour ce type</p>
            <p class="small">Toutes les sections de ce type sont déjà ajoutées au conteneur</p>
        </div>
    }
    else
    {
        <div class="sections-list">
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" id="selectAll" 
                       @onchange="ToggleSelectAll" checked="@allSelected">
                <label class="form-check-label fw-bold" for="selectAll">
                    Tout sélectionner (@sectionsDisponibles.Count section(s))
                </label>
            </div>

            <hr class="my-3">

            @foreach (var section in sectionsDisponibles)
            {
                <div class="card mb-2 section-card @(sectionsSelectionnees.Contains(section.Id) ? "selected" : "")">
                    <div class="card-body p-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="section_@(section.Id)"
                                   checked="@sectionsSelectionnees.Contains(section.Id)"
                                   @onchange="@(e => ToggleSection(section.Id, e))">
                            <label class="form-check-label w-100" for="section_@(section.Id)">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">@(section.Titre)</h6>
                                        @if (!string.IsNullOrWhiteSpace(section.ContenuHtml))
                                        {
                                            <div class="mt-2">
                                                <small class="text-muted fw-bold">Aperçu :</small>
                                                <div class="border rounded p-2 mt-1 section-html-preview">
                                                    @((MarkupString)TronquerHtmlProprement(section.ContenuHtml, 200))
                                                </div>
                                            </div>
                                        }
                                        <small class="text-muted">
                                            <span class="oi oi-calendar"></span>
                                            Modifiée le @(section.DateModification.ToString("dd/MM/yyyy"))
                                        </small>
                                    </div>
                                    <div class="ms-2">
                                        @if (sectionsSelectionnees.Contains(section.Id))
                                        {
                                            <span class="badge bg-primary">
                                                <span class="oi oi-check"></span>
                                            </span>
                                        }
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="dialog-footer mt-4">
            <div class="d-flex justify-content-between align-items-center">
                <div class="text-muted">
                    <span class="oi oi-info"></span>
                    @sectionsSelectionnees.Count section(s) sélectionnée(s)
                </div>
                <div class="btn-group">
                    <button class="btn btn-secondary" @onclick="Annuler">
                        Annuler
                    </button>
                    <button class="btn btn-primary" @onclick="Confirmer" 
                            disabled="@(!sectionsSelectionnees.Any() || isProcessing)">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Ajouter (@sectionsSelectionnees.Count)
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int SectionConteneursId { get; set; }
    [Parameter] public int TypeSectionId { get; set; }
    [Parameter] public string TypeSectionNom { get; set; } = string.Empty;
    [Parameter] public EventCallback<List<int>> OnSectionsSelected { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<SectionLibre> sectionsDisponibles = new();
    private HashSet<int> sectionsSelectionnees = new();
    private bool isLoading = false;
    private bool isProcessing = false;
    private bool allSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await ChargerSectionsDisponibles();
    }

    private async Task ChargerSectionsDisponibles()
    {
        try
        {
            isLoading = true;
            sectionsDisponibles = await sectionConteneurService.GetAvailableSectionsForConteneurAsync(
                SectionConteneursId, TypeSectionId);
            MettreAJourEtatSelectionTotale();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", 
                $"Erreur lors du chargement des sections : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleSection(int sectionId, ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value!;
        
        if (isChecked)
        {
            sectionsSelectionnees.Add(sectionId);
        }
        else
        {
            sectionsSelectionnees.Remove(sectionId);
        }
        
        MettreAJourEtatSelectionTotale();
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value!;
        
        if (isChecked)
        {
            sectionsSelectionnees.Clear();
            foreach (var section in sectionsDisponibles)
            {
                sectionsSelectionnees.Add(section.Id);
            }
        }
        else
        {
            sectionsSelectionnees.Clear();
        }
        
        allSelected = isChecked;
    }

    private void MettreAJourEtatSelectionTotale()
    {
        allSelected = sectionsDisponibles.Any() && 
                      sectionsSelectionnees.Count == sectionsDisponibles.Count;
    }

    private void Confirmer()
    {
        if (!sectionsSelectionnees.Any()) return;

        try
        {
            isProcessing = true;
            // Dans un DialogService.OpenAsync, on retourne le résultat via DialogService.Close
            DialogService.Close(sectionsSelectionnees.ToList());
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void Annuler()
    {
        DialogService.Close(null);
    }

    private string TronquerHtmlProprement(string html, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(html))
            return string.Empty;

        // Supprimer les balises HTML pour avoir le texte pur pour la limite
        var texteSansBalises = System.Text.RegularExpressions.Regex.Replace(html, "<.*?>", string.Empty);

        if (texteSansBalises.Length <= maxLength)
            return html; // Retourner le HTML complet si le texte est court

        // Si le texte est trop long, tronquer intelligemment
        var texteTronque = texteSansBalises.Substring(0, maxLength);
        var positionDernierEspace = texteTronque.LastIndexOf(' ');

        if (positionDernierEspace > 0)
            texteTronque = texteTronque.Substring(0, positionDernierEspace);

        // Maintenant tronquer le HTML original en essayant de garder les balises cohérentes
        var htmlTronque = TronquerHtmlAvecBalises(html, texteTronque.Length);

        return htmlTronque + "...";
    }

    private string TronquerHtmlAvecBalises(string html, int maxTextLength)
    {
        var textLength = 0;
        var result = "";
        var inTag = false;

        for (int i = 0; i < html.Length && textLength < maxTextLength; i++)
        {
            var c = html[i];

            if (c == '<')
                inTag = true;
            else if (c == '>')
                inTag = false;
            else if (!inTag)
                textLength++;

            result += c;
        }

        return result;
    }
}

<style>
    .section-selection-dialog {
        min-width: 500px;
        max-width: 800px;
    }
    
    .sections-list {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        background-color: #f8f9fa;
    }
    
    .section-card {
        transition: all 0.2s ease;
        border: 2px solid transparent;
        cursor: pointer;
    }
    
    .section-card:hover {
        border-color: #e9ecef;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .section-card.selected {
        border-color: #0d6efd;
        background-color: #f8f9ff;
    }
    
    .section-card .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .dialog-header {
        padding-bottom: 1rem;
        border-bottom: 1px solid #dee2e6;
        margin-bottom: 1rem;
    }
    
    .dialog-footer {
        padding-top: 1rem;
        border-top: 1px solid #dee2e6;
    }
    
    .form-check-label {
        cursor: pointer;
    }

    .section-html-preview {
        max-height: 6em;
        overflow-y: auto;
        background-color: #f8f9fa;
        font-size: 0.85rem;
        line-height: 1.4;
    }

    .section-html-preview * {
        margin: 0.2em 0;
        font-size: inherit !important;
    }

    .section-html-preview img {
        max-width: 100%;
        height: auto;
        max-height: 3em;
    }
</style>