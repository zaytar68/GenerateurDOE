@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@inject IFTConteneurService ftConteneurService
@inject IFicheTechniqueService ficheTechniqueService
@inject IOperationLockService operationLockService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService

<div class="ft-conteneur-editor">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (FTConteneur == null)
    {
        <div class="text-center text-muted py-4">
            <span class="oi oi-document" style="font-size: 3rem; opacity: 0.3;"></span>
            <p class="mt-2">Aucun conteneur de fiches techniques</p>
            <p class="small">Le conteneur doit être créé depuis l'onglet principal</p>
        </div>
    }
    else
    {
        <!-- Paramètres du conteneur -->
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <span class="oi oi-cog" aria-hidden="true"></span>
                    Configuration du Conteneur
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Titre du conteneur</label>
                        <input type="text" class="form-control" @bind="FTConteneur.Titre" 
                               @bind:after="SauvegarderConteneur" />
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" 
                                   @bind="FTConteneur.AfficherTableauRecapitulatif"
                                   @bind:after="SauvegarderConteneur" id="afficherTableau">
                            <label class="form-check-label" for="afficherTableau">
                                Afficher le tableau récapitulatif
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Section d'ajout de nouvelle fiche technique -->
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    Ajouter une Fiche Technique
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Fiche Technique</label>
                        <AutoComplete T="FicheTechnique"
                                      Items="fichesDisponibles"
                                      DisplaySelector="GetFicheDisplayText"
                                      Placeholder="Rechercher une fiche technique..."
                                      Value="@searchText"
                                      OnItemSelected="OnFicheTechniqueSelected"
                                      OnTextChanged="OnSearchTextChanged"
                                      MinSearchLength="1">
                            <ItemTemplate Context="fiche">
                                <div>
                                    <strong>@fiche.NomProduit</strong>
                                    <small class="text-muted d-block">
                                        <i class="oi oi-person me-1"></i>@fiche.NomFabricant
                                        <span class="mx-2">•</span>
                                        <i class="oi oi-tag me-1"></i>@fiche.TypeProduit
                                    </small>
                                </div>
                            </ItemTemplate>
                        </AutoComplete>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Position Marché (optionnel)</label>
                        <input type="text" class="form-control" @bind="nouvellePositionMarche"
                               placeholder="ex: 1.1" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Commentaire (optionnel)</label>
                        <input type="text" class="form-control" @bind="nouveauCommentaire"
                               placeholder="Commentaire..." maxlength="500" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Documents PDF (optionnel)</label>
                        @if (pdfsByCategory.Any())
                        {
                            <div class="pdf-selection-container border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var categoryGroup in pdfsByCategory.Where(kvp => kvp.Value.Any()))
                                {
                                    <div class="category-group mb-2">
                                        <h6 class="category-title text-primary fw-bold mb-1">
                                            <span class="oi oi-folder" aria-hidden="true"></span>
                                            @categoryGroup.Key
                                        </h6>
                                        @foreach (var pdfItem in categoryGroup.Value)
                                        {
                                            <div class="form-check ms-3">
                                                <input class="form-check-input" type="checkbox"
                                                       @bind="pdfItem.IsSelected"
                                                       id="pdf_@pdfItem.ImportPDF.Id">
                                                <label class="form-check-label" for="pdf_@pdfItem.ImportPDF.Id">
                                                    @pdfItem.NomFichierOriginal
                                                </label>
                                            </div>
                                        }
                                    </div>
                                }
                                <div class="mt-2">
                                    <small class="text-muted">
                                        <span class="oi oi-info" aria-hidden="true"></span>
                                        Sélectionnez un ou plusieurs documents PDF à associer
                                    </small>
                                </div>
                            </div>
                        }
                        else if (selectedFicheTechniqueId > 0)
                        {
                            <div class="alert alert-info py-2">
                                <small>Aucun document PDF disponible pour cette fiche technique</small>
                            </div>
                        }
                        else
                        {
                            <div class="form-control text-muted">
                                Sélectionnez d'abord une fiche technique
                            </div>
                        }
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button class="btn btn-primary w-100" @onclick="AjouterFicheTechnique"
                                disabled="@(selectedFicheTechniqueId == 0 || isAdding)">
                            @if (isAdding)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Ajouter
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Liste des éléments du conteneur -->
        @if (FTConteneur.Elements.Any())
        {
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        Fiches Techniques (@FTConteneur.Elements.Count)
                    </h6>
                    <div class="btn-group">
                        <button class="btn btn-outline-info btn-sm" @onclick="CalculerNumeroPages">
                            <span class="oi oi-calculator"></span>
                            Calculer Pages
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="AfficherTableauRecap">
                            <span class="oi oi-spreadsheet"></span>
                            Tableau Récap
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 50px;">Ordre</th>
                                    <th style="width: 7%;">Position Marché</th>
                                    <th style="width: 15%;">Fabricant</th>
                                    <th>Produit</th>
                                    <th style="width: 10%;">Type</th>
                                    <th style="width: 20%;">Spécificités</th>
                                    <th style="width: 10%;">Document</th>
                                    <th style="width: 5%;">Page</th>
                                    <th style="width: 120px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="sortable-tbody">
                                @foreach (var element in FTConteneur.Elements.OrderBy(e => e.Ordre))
                                {
                                    <tr draggable="true" data-element-id="@element.Id"
                                        @ondragstart="@((DragEventArgs e) => OnDragStart(e, element.Id))"
                                        @ondragenter="@((DragEventArgs e) => OnDragEnter(e))"
                                        @ondragenter:preventDefault="true"
                                        @ondragover="@((DragEventArgs e) => OnDragOver(e))"
                                        @ondragover:preventDefault="true"
                                        @ondragleave="@((DragEventArgs e) => OnDragLeave(e))"
                                        @ondrop="@((DragEventArgs e) => OnDrop(e, element.Id))"
                                        @ondrop:preventDefault="true"
                                        class="sortable-row @(draggedElementId == element.Id ? "dragging" : "")">
                                        <td class="text-center">
                                            <span class="drag-handle" style="cursor: move;">⋮⋮</span>
                                            @element.Ordre
                                        </td>
                                        <td>
                                            <input type="text" class="form-control form-control-sm" 
                                                   @bind="element.PositionMarche" 
                                                   @bind:after="() => MettreAJourElement(element)" />
                                        </td>
                                        <td>@element.FicheTechnique.NomFabricant</td>
                                        <td>@element.FicheTechnique.NomProduit</td>
                                        <td>@element.FicheTechnique.TypeProduit</td>
                                        <td>
                                            <input type="text" class="form-control form-control-sm"
                                                   @bind="element.Commentaire"
                                                   @bind:after="() => MettreAJourElement(element)"
                                                   placeholder="Commentaire..."
                                                   maxlength="500" />
                                        </td>
                                        <td>
                                            @if (element.ImportPDF != null)
                                            {
                                                <!-- TODO(human): Remplacez pdf.TypeDocument par pdf.TypeDocumentImport?.Nom ?? "Non défini" -->
                                                <span class="badge bg-info">@(element.ImportPDF.TypeDocumentImport?.Nom ?? "Non défini")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Tous documents</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            @if (element.NumeroPage.HasValue)
                                            {
                                                <span class="badge bg-secondary">@element.NumeroPage</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-outline-secondary btn-sm" 
                                                        @onclick="() => EditerElement(element)">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" 
                                                        @onclick="() => SupprimerElement(element)">
                                                    <span class="oi oi-trash"></span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center text-muted py-4">
                <span class="oi oi-document" style="font-size: 3rem; opacity: 0.3;"></span>
                <p class="mt-2">Aucune fiche technique ajoutée</p>
                <p class="small">Sélectionnez une fiche technique ci-dessus pour commencer</p>
            </div>
        }
    }
</div>

@code {
    [Parameter] public FTConteneur? FTConteneur { get; set; }
    [Parameter] public EventCallback<FTConteneur> OnConteneurChanged { get; set; }

    private List<FicheTechnique> fichesDisponibles = new();
    private List<ImportPDF> importsDisponibles = new();
    private Dictionary<string, List<ImportPDFWithSelection>> pdfsByCategory = new();

    private bool isLoading = false;
    private bool isAdding = false;
    private int selectedFicheTechniqueId = 0;
    private FicheTechnique? selectedFiche = null;
    private string searchText = string.Empty;
    private List<int> selectedImportPDFIds = new();
    private string nouvellePositionMarche = string.Empty;
    private string nouveauCommentaire = string.Empty;
    private int draggedElementId = 0;

    // Classe helper pour la sélection multiple
    public class ImportPDFWithSelection
    {
        public ImportPDF ImportPDF { get; set; } = null!;
        public bool IsSelected { get; set; }
        public string NomFichierOriginal => ImportPDF.NomFichierOriginal;
        public string CategoryName => ImportPDF.TypeDocumentImport?.Nom ?? "Non défini";
    }

    protected override async Task OnInitializedAsync()
    {
        await ChargerDonnees();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (FTConteneur != null)
        {
            await ChargerDonnees();
        }
    }

    private async Task ChargerDonnees()
    {
        try
        {
            isLoading = true;

            // Charger les fiches techniques disponibles
            fichesDisponibles = (await ftConteneurService.GetAvailableFichesTechniquesAsync(FTConteneur?.DocumentGenereId ?? 0).ConfigureAwait(false)).ToList();
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                    $"Erreur lors du chargement: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] ChargerFichesDisponibles error (masqué): {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnFicheTechniqueChanged()
    {
        importsDisponibles.Clear();
        pdfsByCategory.Clear();
        selectedImportPDFIds.Clear();

        if (selectedFicheTechniqueId > 0)
        {
            var ficheSelectionnee = fichesDisponibles.FirstOrDefault(f => f.Id == selectedFicheTechniqueId);
            if (ficheSelectionnee != null)
            {
                importsDisponibles = ficheSelectionnee.ImportsPDF.ToList();

                // Grouper les PDFs par catégorie
                var groupedPdfs = ficheSelectionnee.ImportsPDF
                    .GroupBy(pdf => pdf.TypeDocumentImport?.Nom ?? "Non défini")
                    .Where(group => group.Any()) // N'afficher que les catégories avec des fichiers
                    .ToDictionary(
                        group => group.Key,
                        group => group.Select(pdf => new ImportPDFWithSelection
                        {
                            ImportPDF = pdf,
                            IsSelected = false
                        }).ToList()
                    );

                pdfsByCategory = groupedPdfs;
            }
        }

        StateHasChanged();
    }

    private string GetFicheDisplayText(FicheTechnique fiche)
    {
        return $"{fiche.NomFabricant} - {fiche.NomProduit} ({fiche.TypeProduit})";
    }

    private async Task OnFicheTechniqueSelected(FicheTechnique fiche)
    {
        selectedFiche = fiche;
        selectedFicheTechniqueId = fiche.Id;
        searchText = GetFicheDisplayText(fiche);

        // Déclencher les mêmes actions que l'ancienne méthode OnFicheTechniqueChanged
        OnFicheTechniqueChanged();

        StateHasChanged();
    }

    private async Task OnSearchTextChanged(string text)
    {
        searchText = text;

        // Si le texte est vidé, réinitialiser la sélection
        if (string.IsNullOrWhiteSpace(text))
        {
            selectedFiche = null;
            selectedFicheTechniqueId = 0;
            OnFicheTechniqueChanged();
        }

        StateHasChanged();
    }

    private async Task AjouterFicheTechnique()
    {
        if (FTConteneur == null || selectedFicheTechniqueId == 0)
            return;

        try
        {
            isAdding = true;

            // Récupérer les PDFs sélectionnés
            var pdfsSelectionnes = pdfsByCategory
                .SelectMany(kvp => kvp.Value)
                .Where(pdf => pdf.IsSelected)
                .Select(pdf => pdf.ImportPDF.Id)
                .ToList();

            if (pdfsSelectionnes.Any())
            {
                // Créer un élément pour chaque PDF sélectionné
                var elementsAjoutes = new List<FTElement>();

                for (int i = 0; i < pdfsSelectionnes.Count; i++)
                {
                    var pdfId = pdfsSelectionnes[i];
                    var positionMarche = pdfsSelectionnes.Count == 1
                        ? nouvellePositionMarche
                        : $"{nouvellePositionMarche}.{i + 1}";

                    var element = await ftConteneurService.AddFTElementAsync(
                        FTConteneur.Id,
                        selectedFicheTechniqueId,
                        positionMarche,
                        pdfId,
                        nouveauCommentaire);

                    elementsAjoutes.Add(element);
                }

                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                    $"{elementsAjoutes.Count} élément(s) ajouté(s) avec succès");
            }
            else
            {
                // Aucun PDF sélectionné - créer un élément avec tous les documents
                var element = await ftConteneurService.AddFTElementAsync(
                    FTConteneur.Id,
                    selectedFicheTechniqueId,
                    nouvellePositionMarche,
                    null,
                    nouveauCommentaire);

                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                    $"Fiche technique ajoutée à la position {element.PositionMarche} (tous documents)");
            }

            // Recharger le conteneur pour avoir les données complètes
            FTConteneur = await ftConteneurService.GetByIdAsync(FTConteneur.Id);

            // Reset du formulaire
            selectedFicheTechniqueId = 0;
            selectedFiche = null;
            searchText = string.Empty;
            selectedImportPDFIds.Clear();
            nouvellePositionMarche = string.Empty;
            nouveauCommentaire = string.Empty;
            importsDisponibles.Clear();
            pdfsByCategory.Clear();

            await OnConteneurChanged.InvokeAsync(FTConteneur);
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
            }
            Console.WriteLine($"[DEBUG] AjouterFicheTechnique error (masqué): {ex.Message}");
        }
        finally
        {
            isAdding = false;
        }
    }

    private async Task SupprimerElement(FTElement element)
    {
        var result = await DialogService.Confirm(
            $"Êtes-vous sûr de vouloir supprimer la fiche technique à la position '{element.PositionMarche}' ?",
            "Confirmation de suppression",
            new Radzen.ConfirmOptions { OkButtonText = "Supprimer", CancelButtonText = "Annuler" });

        if (result == true)
        {
            try
            {
                // 🔧 CORRECTION CONCURRENCE: Protection suppression élément
                var operationKey = $"remove-ftelement-{element.Id}";
                var executed = await operationLockService.ExecuteWithLockAsync(operationKey, async () =>
                {
                    await ftConteneurService.RemoveFTElementAsync(element.Id);

                    // Recharger le conteneur
                    if (FTConteneur != null)
                    {
                        FTConteneur = await ftConteneurService.GetByIdAsync(FTConteneur.Id);
                    }

                    await OnConteneurChanged.InvokeAsync(FTConteneur);

                    NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                        "Élément supprimé avec succès");
                });

                if (!executed)
                {
                    NotificationService.Notify(Radzen.NotificationSeverity.Warning, "Opération ignorée",
                        "Une suppression est déjà en cours");
                }
            }
            catch (Exception ex)
            {
                // Masquer les erreurs de concurrence DbContext (temporaire)
                if (!ex.Message.Contains("A second operation was started on this context") &&
                    !ex.Message.Contains("context instance"))
                {
                    NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
                }
                Console.WriteLine($"[DEBUG] SupprimerElement error (masqué): {ex.Message}");
            }
        }
    }

    private async Task MettreAJourElement(FTElement element)
    {
        try
        {
            await ftConteneurService.UpdateFTElementAsync(element);
            await OnConteneurChanged.InvokeAsync(FTConteneur);
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
            }
            Console.WriteLine($"[DEBUG] MettreAJourElement error (masqué): {ex.Message}");
        }
    }

    private void EditerElement(FTElement element)
    {
        // TODO: Implémenter l'édition avancée des éléments
        NotificationService.Notify(Radzen.NotificationSeverity.Info, "À venir", 
            "Édition avancée des éléments en cours de développement");
    }

    private async Task CalculerNumeroPages()
    {
        if (FTConteneur == null) return;

        try
        {
            FTConteneur = await ftConteneurService.CalculatePageNumbersAsync(FTConteneur.Id);
            await OnConteneurChanged.InvokeAsync(FTConteneur);
            
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                "Numéros de pages calculés avec succès");
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
            }
            Console.WriteLine($"[DEBUG] CalculerNumeroPages error (masqué): {ex.Message}");
        }
    }

    private async Task AfficherTableauRecap()
    {
        if (FTConteneur == null) return;

        try
        {
            var htmlTableau = await ftConteneurService.GenerateTableauRecapitulatifHtmlAsync(FTConteneur.Id);
            
            await DialogService.OpenAsync("Tableau Récapitulatif", ds =>
                @<div>
                    @((MarkupString)htmlTableau)
                    <div class="text-end mt-3">
                        <button class="btn btn-secondary" @onclick="() => ds.Close()">Fermer</button>
                    </div>
                </div>,
                new Radzen.DialogOptions { Width = "90%", Height = "70%", Resizable = true });
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
            }
            Console.WriteLine($"[DEBUG] AfficherTableauRecap error (masqué): {ex.Message}");
        }
    }

    private async Task SauvegarderConteneur()
    {
        if (FTConteneur == null) return;

        try
        {
            FTConteneur = await ftConteneurService.UpdateAsync(FTConteneur);
            await OnConteneurChanged.InvokeAsync(FTConteneur);
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", ex.Message);
            }
            Console.WriteLine($"[DEBUG] SauvegarderConteneur error (masqué): {ex.Message}");
        }
    }

    private void OnDragStart(DragEventArgs e, int elementId)
    {
        draggedElementId = elementId;
        e.DataTransfer.EffectAllowed = "move";
    }

    private void OnDragEnter(DragEventArgs e)
    {
        if (draggedElementId != 0)
        {
            e.DataTransfer.DropEffect = "move";
        }
    }

    private void OnDragOver(DragEventArgs e)
    {
        if (draggedElementId != 0)
        {
            e.DataTransfer.DropEffect = "move";
        }
    }

    private void OnDragLeave(DragEventArgs e)
    {
        // Placeholder pour futurs effets visuels
    }

    private async Task OnDrop(DragEventArgs e, int targetElementId)
    {
        e.DataTransfer.DropEffect = "move";

        if (draggedElementId == 0 || draggedElementId == targetElementId || FTConteneur == null)
            return;

        try
        {
            // Obtenir l'ordre actuel des éléments
            var elements = FTConteneur.Elements.OrderBy(el => el.Ordre).ToList();
            var draggedElement = elements.FirstOrDefault(el => el.Id == draggedElementId);
            var targetElement = elements.FirstOrDefault(el => el.Id == targetElementId);

            if (draggedElement == null || targetElement == null)
                return;

            // Supprimer l'élément déplacé de sa position actuelle
            elements.Remove(draggedElement);

            // Trouver la nouvelle position de l'élément cible
            var targetIndex = elements.IndexOf(targetElement);

            // Insérer l'élément déplacé à la nouvelle position
            elements.Insert(targetIndex, draggedElement);

            // Créer la liste des IDs dans le nouvel ordre
            var newOrder = elements.Select(el => el.Id).ToList();

            // Appeler le service pour réorganiser
            FTConteneur = await ftConteneurService.ReorderFTElementsAsync(FTConteneur.Id, newOrder);
            await OnConteneurChanged.InvokeAsync(FTConteneur);

            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès", "Ordre des fiches techniques mis à jour");
        }
        catch (Exception ex)
        {
            // Masquer les erreurs de concurrence DbContext (temporaire)
            if (!ex.Message.Contains("A second operation was started on this context") &&
                !ex.Message.Contains("context instance"))
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur", $"Erreur lors du réarrangement: {ex.Message}");
            }
            Console.WriteLine($"[DEBUG] OnDrop error (masqué): {ex.Message}");
        }
        finally
        {
            draggedElementId = 0;
        }
    }
}

<style>
    .ft-conteneur-editor {
        min-height: 200px;
    }

    .drag-handle {
        color: #6c757d;
        font-size: 1.1em;
    }

    .drag-handle:hover {
        color: #495057;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        font-size: 0.9em;
    }

    .form-control-sm {
        border: 1px solid transparent;
    }

    .form-control-sm:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    /* Styles pour l'interface de sélection PDF */
    .pdf-selection-container {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }

    .category-group {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 8px;
    }

    .category-group:last-child {
        border-bottom: none;
        margin-bottom: 0 !important;
    }

    .category-title {
        font-size: 0.875rem;
        margin-bottom: 4px;
        color: #0d6efd;
    }

    .category-title .oi {
        font-size: 0.8rem;
        margin-right: 4px;
    }

    .form-check {
        margin-bottom: 4px;
    }

    .form-check-label {
        font-size: 0.875rem;
        color: #495057;
        cursor: pointer;
    }

    .form-check-input:checked + .form-check-label {
        color: #0d6efd;
        font-weight: 500;
    }

    /* Styles pour le drag & drop */
    .sortable-row {
        transition: background-color 0.2s ease;
    }

    .sortable-row:hover {
        background-color: #f8f9fa;
    }

    .sortable-row[draggable="true"] {
        cursor: move;
    }

    .sortable-row[draggable="true"]:active {
        opacity: 0.5;
    }

    .sortable-row.dragging {
        opacity: 0.5;
        background-color: #e3f2fd;
    }

    .sortable-row:dragover {
        background-color: #f0f8ff;
        border: 2px dashed #007bff;
    }

    .drag-handle {
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }
</style>