@using System.Text.Json
@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@inject Radzen.NotificationService NotificationService

<div class="table-matieres-editor">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                <span class="oi oi-list" aria-hidden="true"></span>
                Configuration de la table des matières
            </h5>
        </div>
        <div class="card-body">
            <!-- Configuration générale -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="titreTableMatieres" class="form-label">Titre de la table des matières</label>
                    <RadzenTextBox @bind-Value="TitreTableMatieres"
                                   @bind-Value:after="OnTableMatieresChanged"
                                   id="titreTableMatieres"
                                   class="form-control"
                                   placeholder="Table des matières" />
                </div>
                <div class="col-md-6">
                    <div class="form-check">
                        <RadzenCheckBox @bind-Value="IncludeNumeroPages"
                                        @bind-Value:after="OnTableMatieresChanged"
                                        id="includeNumeroPages" />
                        <label class="form-check-label" for="includeNumeroPages">
                            Inclure les numéros de pages
                        </label>
                    </div>
                    <div class="form-check mt-2">
                        <RadzenCheckBox @bind-Value="IncludePageGarde"
                                        @bind-Value:after="OnTableMatieresChanged"
                                        id="includePageGarde" />
                        <label class="form-check-label" for="includePageGarde">
                            Inclure la page de garde dans la numérotation
                        </label>
                    </div>
                </div>
            </div>

            <!-- Mode de génération -->
            <div class="row mb-4">
                <div class="col-12">
                    <label class="form-label">Mode de génération</label>
                    <div class="btn-group w-100" role="group">
                        <RadzenRadioButtonList @bind-Value="ModeGeneration"
                                               @bind-Value:after="OnModeGenerationChanged"
                                               TValue="TocModeGeneration"
                                               Orientation="Radzen.Orientation.Horizontal"
                                               class="d-flex">
                            <Items>
                                <RadzenRadioButtonListItem Text="Automatique" Value="TocModeGeneration.Automatique" />
                                <RadzenRadioButtonListItem Text="Personnalisable" Value="TocModeGeneration.Personnalisable" />
                            </Items>
                        </RadzenRadioButtonList>
                    </div>
                    <small class="text-muted">
                        @if (ModeGeneration == TocModeGeneration.Automatique)
                        {
                            <text>La table des matières sera générée automatiquement basée sur le contenu du document.</text>
                        }
                        else
                        {
                            <text>Vous pouvez personnaliser les entrées de la table des matières manuellement.</text>
                        }
                    </small>
                </div>
            </div>

            <!-- Section personnalisable -->
            @if (ModeGeneration == TocModeGeneration.Personnalisable)
            {
                <div class="alert alert-info">
                    <span class="oi oi-info" aria-hidden="true"></span>
                    <strong>Mode personnalisable activé</strong><br />
                    Vous pouvez charger la structure par défaut puis la modifier selon vos besoins.
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <button type="button" class="btn btn-outline-info btn-sm"
                                @onclick="LoadDefaultStructure"
                                disabled="@IsLoadingStructure">
                            <i class="oi oi-cloud-download"></i> Charger la structure par défaut
                        </button>
                    </div>
                    <div class="col-md-6">
                        <button type="button" class="btn btn-success btn-sm"
                                @onclick="AddCustomEntry">
                            <i class="oi oi-plus"></i> Ajouter une entrée personnalisée
                        </button>
                    </div>
                </div>

                <!-- Options pour les numéros de pages -->
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="form-check">
                            <RadzenCheckBox @bind-Value="UseAutoPageNumbers"
                                            @bind-Value:after="OnTableMatieresChanged"
                                            id="useAutoPageNumbers" />
                            <label class="form-check-label" for="useAutoPageNumbers">
                                Numérotation automatique des pages
                            </label>
                        </div>
                        <small class="text-muted">
                            Si désactivé, vous pourrez saisir manuellement les numéros de pages pour chaque entrée.
                        </small>
                    </div>
                </div>

                <!-- Liste des entrées personnalisées -->
                @if (EntriesCustom.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 120px;">Ordre</th>
                                    <th>Titre</th>
                                    <th style="width: 100px;">Niveau</th>
                                    <th style="width: 100px;">N° Page</th>
                                    <th style="width: 120px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var (entry, index) in EntriesCustom.Select((e, i) => (e, i)))
                                {
                                    <tr class="@(entry.IsModified ? "table-warning" : "")" data-index="@index">
                                        <td>
                                            <div class="d-flex">
                                                <button type="button" class="btn btn-sm btn-outline-secondary me-1"
                                                        @onclick="() => MoveEntryUp(index)" disabled="@(index == 0)">
                                                    <span class="oi oi-arrow-top"></span>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary"
                                                        @onclick="() => MoveEntryDown(index)" disabled="@(index == EntriesCustom.Count - 1)">
                                                    <span class="oi oi-arrow-bottom"></span>
                                                </button>
                                            </div>
                                        </td>
                                        <td>
                                            <InputText @bind-Value="entry.Title"
                                                       @bind-Value:after="() => OnEntryChanged(entry)"
                                                       class="form-control form-control-sm"
                                                       placeholder="Titre de l'entrée" />
                                            @if (entry.IsModified && !entry.IsManualEntry)
                                            {
                                                <small class="text-muted">Original: @entry.OriginalTitle</small>
                                            }
                                        </td>
                                        <td>
                                            <InputSelect @bind-Value="entry.Level"
                                                         @bind-Value:after="() => OnEntryChanged(entry)"
                                                         class="form-select form-select-sm">
                                                <option value="1">1</option>
                                                <option value="2">2</option>
                                                <option value="3">3</option>
                                            </InputSelect>
                                        </td>
                                        <td>
                                            @if (UseAutoPageNumbers)
                                            {
                                                <span class="badge bg-secondary">Auto</span>
                                            }
                                            else
                                            {
                                                <InputNumber @bind-Value="entry.PageNumber"
                                                             @bind-Value:after="() => OnEntryChanged(entry)"
                                                             class="form-control form-control-sm"
                                                             min="1" />
                                            }
                                        </td>
                                        <td>
                                            @if (!entry.IsManualEntry && entry.IsModified)
                                            {
                                                <button type="button" class="btn btn-sm btn-warning me-1"
                                                        @onclick="() => ResetEntry(entry)" title="Restaurer l'original">
                                                    <span class="oi oi-action-undo"></span>
                                                </button>
                                            }
                                            <button type="button" class="btn btn-sm btn-danger"
                                                    @onclick="() => RemoveEntry(index)" title="Supprimer">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-secondary text-center">
                        <span class="oi oi-document" aria-hidden="true"></span>
                        <p class="mb-0">Aucune entrée personnalisée définie.</p>
                        <small>Utilisez les boutons ci-dessus pour charger la structure par défaut ou ajouter des entrées manuellement.</small>
                    </div>
                }
            }

            <!-- Aperçu de la table des matières -->
            <div class="mt-4">
                <h6>Aperçu de la table des matières</h6>
                <div class="toc-preview border rounded p-3 bg-light">
                    <div class="toc-title">@TitreTableMatieres</div>
                    <div class="toc-content">
                        @if (ModeGeneration == TocModeGeneration.Automatique)
                        {
                            <!-- Aperçu automatique basé sur le contenu du document -->
                            @if (SectionsCount > 0)
                            {
                                <div class="toc-entry">
                                    <span class="toc-bullet">•</span>
                                    <span class="toc-title-entry">Sections libres</span>
                                    @if (IncludeNumeroPages)
                                    {
                                        <span class="toc-page">3</span>
                                    }
                                </div>
                            }
                            @if (FichesCount > 0)
                            {
                                <div class="toc-entry">
                                    <span class="toc-bullet">•</span>
                                    <span class="toc-title-entry">Fiches techniques</span>
                                    @if (IncludeNumeroPages)
                                    {
                                        <span class="toc-page">@(SectionsCount > 0 ? 5 : 3)</span>
                                    }
                                </div>
                            }
                            @if (SectionsCount == 0 && FichesCount == 0)
                            {
                                <div class="toc-entry text-muted">
                                    <span class="toc-bullet">•</span>
                                    <span class="toc-title-entry">Aucun contenu défini</span>
                                </div>
                            }
                        }
                        else
                        {
                            <!-- Aperçu personnalisé -->
                            @if (EntriesCustom.Any())
                            {
                                @foreach (var entry in EntriesCustom.OrderBy(e => e.Order))
                                {
                                    <div class="toc-entry @(entry.Level == 2 ? "toc-level-2" : "")">
                                        <span class="toc-bullet">@(entry.Level == 1 ? "•" : "‣")</span>
                                        <span class="toc-title-entry">@entry.Title</span>
                                        @if (IncludeNumeroPages)
                                        {
                                            <span class="toc-page">@(UseAutoPageNumbers ? "Auto" : entry.PageNumber.ToString())</span>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="toc-entry text-muted">
                                    <span class="toc-bullet">•</span>
                                    <span class="toc-title-entry">Aucune entrée définie</span>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public DocumentGenere DocumentGenere { get; set; } = new();
    [Parameter] public EventCallback<DocumentGenere> DocumentGenereChanged { get; set; }
    [Parameter] public int SectionsCount { get; set; } = 0;
    [Parameter] public int FichesCount { get; set; } = 0;

    // Propriétés pour la configuration de la table des matières
    public string TitreTableMatieres { get; set; } = "Table des matières";
    public bool IncludeNumeroPages { get; set; } = true;
    public bool IncludePageGarde { get; set; } = true;
    public TocModeGeneration ModeGeneration { get; set; } = TocModeGeneration.Automatique;
    public bool UseAutoPageNumbers { get; set; } = true;
    public List<CustomTocEntry> EntriesCustom { get; set; } = new();

    private bool IsLoadingStructure { get; set; } = false;

    protected override void OnParametersSet()
    {
        LoadTableMatieresSettings();
    }

    private void LoadTableMatieresSettings()
    {
        try
        {
            // Charger les paramètres depuis le JSON ou utiliser les valeurs par défaut
            if (!string.IsNullOrWhiteSpace(DocumentGenere.Parametres))
            {
                var settings = JsonSerializer.Deserialize<TableMatieresSettings>(DocumentGenere.Parametres);
                if (settings?.TableMatieres != null)
                {
                    var config = settings.TableMatieres;
                    TitreTableMatieres = config.Titre ?? "Table des matières";
                    IncludeNumeroPages = config.IncludeNumeroPages;
                    IncludePageGarde = config.IncludePageGarde;
                    ModeGeneration = config.ModeGeneration;
                    UseAutoPageNumbers = config.UseAutoPageNumbers;
                    EntriesCustom = config.EntriesCustom ?? new();
                    return;
                }
            }
        }
        catch
        {
            // Si erreur de désérialisation, utiliser les valeurs par défaut
        }

        // Valeurs par défaut
        TitreTableMatieres = "Table des matières";
        IncludeNumeroPages = true;
        IncludePageGarde = true;
        ModeGeneration = TocModeGeneration.Automatique;
        UseAutoPageNumbers = true;
        EntriesCustom = new();
    }

    private async Task OnTableMatieresChanged()
    {
        try
        {
            // Sauvegarder les paramètres dans le JSON
            var currentSettings = GetCurrentSettings();
            currentSettings.TableMatieres = new TableMatieresConfig
            {
                Titre = TitreTableMatieres,
                IncludeNumeroPages = IncludeNumeroPages,
                IncludePageGarde = IncludePageGarde,
                ModeGeneration = ModeGeneration,
                UseAutoPageNumbers = UseAutoPageNumbers,
                EntriesCustom = EntriesCustom
            };

            DocumentGenere.Parametres = JsonSerializer.Serialize(currentSettings, new JsonSerializerOptions
            {
                WriteIndented = true
            });

            await DocumentGenereChanged.InvokeAsync(DocumentGenere);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Erreur lors de la configuration : {ex.Message}");
        }
    }

    private TableMatieresSettings GetCurrentSettings()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(DocumentGenere.Parametres))
            {
                return JsonSerializer.Deserialize<TableMatieresSettings>(DocumentGenere.Parametres) ?? new TableMatieresSettings();
            }
        }
        catch
        {
            // Si erreur de désérialisation, retourner nouvelles settings
        }
        return new TableMatieresSettings();
    }

    private async Task OnModeGenerationChanged()
    {
        // Si on passe en mode personnalisable et qu'on n'a pas encore d'entrées custom,
        // proposer de charger la structure actuelle
        if (ModeGeneration == TocModeGeneration.Personnalisable && !EntriesCustom.Any())
        {
            // On peut soit proposer de charger automatiquement, soit laisser l'utilisateur le faire manuellement
            // Pour l'instant, on laisse l'utilisateur décider
        }

        await OnTableMatieresChanged();
    }

    private async Task LoadDefaultStructure()
    {
        IsLoadingStructure = true;
        StateHasChanged();

        try
        {
            // Appeler l'API pour récupérer la structure par défaut
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("http://localhost:5282/"); // TODO: configurer l'URL de base

            var response = await httpClient.GetAsync($"api/toc/structure/{DocumentGenere.Id}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var tocStructure = JsonSerializer.Deserialize<TocStructureResponse>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (tocStructure != null)
                {
                    EntriesCustom.Clear();
                    var order = 0;

                    foreach (var entry in tocStructure.Entries)
                    {
                        AddTocEntryRecursive(entry, order++, entry.Level);

                        // Ajouter les entrées enfants
                        foreach (var child in entry.Children)
                        {
                            AddTocEntryRecursive(child, order++, child.Level);
                        }
                    }

                    await OnTableMatieresChanged();
                    NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                        $"Structure chargée avec {EntriesCustom.Count} entrées");
                }
            }
            else
            {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                    "Impossible de charger la structure par défaut");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Erreur lors du chargement : {ex.Message}");
        }
        finally
        {
            IsLoadingStructure = false;
            StateHasChanged();
        }
    }

    private async Task MoveEntryUp(int index)
    {
        if (index > 0)
        {
            (EntriesCustom[index], EntriesCustom[index - 1]) = (EntriesCustom[index - 1], EntriesCustom[index]);

            // Mettre à jour les ordres
            for (int i = 0; i < EntriesCustom.Count; i++)
            {
                EntriesCustom[i].Order = i;
            }

            await OnTableMatieresChanged();
        }
    }

    private async Task MoveEntryDown(int index)
    {
        if (index < EntriesCustom.Count - 1)
        {
            (EntriesCustom[index], EntriesCustom[index + 1]) = (EntriesCustom[index + 1], EntriesCustom[index]);

            // Mettre à jour les ordres
            for (int i = 0; i < EntriesCustom.Count; i++)
            {
                EntriesCustom[i].Order = i;
            }

            await OnTableMatieresChanged();
        }
    }

    private async Task ResetEntry(CustomTocEntry entry)
    {
        if (!entry.IsManualEntry)
        {
            entry.Title = entry.OriginalTitle;
            entry.IsModified = false;
            await OnTableMatieresChanged();
        }
    }

    private async Task RemoveEntry(int index)
    {
        EntriesCustom.RemoveAt(index);

        // Mettre à jour les ordres
        for (int i = 0; i < EntriesCustom.Count; i++)
        {
            EntriesCustom[i].Order = i;
        }

        await OnTableMatieresChanged();
    }

    private void AddTocEntryRecursive(TocEntryDto apiEntry, int order, int level)
    {
        EntriesCustom.Add(new CustomTocEntry
        {
            Title = apiEntry.Title,
            OriginalTitle = apiEntry.Title,
            Level = level,
            PageNumber = apiEntry.PageNumber,
            Order = order,
            IsModified = false,
            IsManualEntry = false
        });
    }

    private async Task AddCustomEntry()
    {
        EntriesCustom.Add(new CustomTocEntry
        {
            Title = "Nouvelle entrée",
            OriginalTitle = "",
            Level = 1,
            PageNumber = 1,
            Order = EntriesCustom.Count,
            IsModified = false,
            IsManualEntry = true
        });

        await OnTableMatieresChanged();
    }

    private async Task OnEntryChanged(CustomTocEntry entry)
    {
        if (!entry.IsManualEntry && entry.Title != entry.OriginalTitle)
        {
            entry.IsModified = true;
        }
        await OnTableMatieresChanged();
    }

    // Classes DTO pour l'API
    public class TocStructureResponse
    {
        public int DocumentId { get; set; }
        public string DocumentTitle { get; set; } = "";
        public bool IncludePageGuard { get; set; }
        public bool IncludeTableOfContents { get; set; }
        public List<TocEntryDto> Entries { get; set; } = new();
    }

    public class TocEntryDto
    {
        public string Title { get; set; } = "";
        public int Level { get; set; }
        public int PageNumber { get; set; }
        public List<TocEntryDto> Children { get; set; } = new();
    }

    // Classes pour la sérialisation JSON
    public class TableMatieresSettings
    {
        public TableMatieresConfig? TableMatieres { get; set; }
    }

    public class TableMatieresConfig
    {
        public string Titre { get; set; } = "Table des matières";
        public bool IncludeNumeroPages { get; set; } = true;
        public bool IncludePageGarde { get; set; } = true;
        public TocModeGeneration ModeGeneration { get; set; } = TocModeGeneration.Automatique;
        public bool UseAutoPageNumbers { get; set; } = true;
        public List<CustomTocEntry> EntriesCustom { get; set; } = new();
    }

    public class CustomTocEntry
    {
        public string Title { get; set; } = "";
        public int Level { get; set; } = 1;
        public int PageNumber { get; set; } = 1;
        public bool IsModified { get; set; } = false;
        public string OriginalTitle { get; set; } = "";
        public bool IsManualEntry { get; set; } = false;
        public int Order { get; set; } = 0;
    }

    public enum TocModeGeneration
    {
        Automatique,
        Personnalisable
    }
}

<style>
    .table-matieres-editor .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .table-matieres-editor .form-check-label {
        cursor: pointer;
    }

    .table-matieres-editor .alert {
        font-size: 0.9rem;
    }

    /* Styles pour l'aperçu de la table des matières */
    .toc-preview {
        max-height: 300px;
        overflow-y: auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .toc-title {
        color: #2c3e50;
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
    }

    .toc-content {
        line-height: 1.6;
    }

    .toc-entry {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
        padding: 0.25rem 0;
        border-bottom: 1px dotted #e9ecef;
    }

    .toc-entry:last-child {
        border-bottom: none;
    }

    .toc-level-2 {
        padding-left: 1.5rem;
        font-size: 0.9rem;
        color: #6c757d;
    }

    .toc-number {
        font-weight: 600;
        color: #495057;
        min-width: 2rem;
        margin-right: 0.5rem;
    }

    .toc-bullet {
        color: #3498db;
        font-size: 1.2rem;
        min-width: 1.5rem;
        margin-right: 0.5rem;
        text-align: center;
    }

    .toc-title-entry {
        flex-grow: 1;
        color: #2c3e50;
        font-weight: 500;
    }

    .toc-page {
        color: #6c757d;
        font-size: 0.9rem;
        font-family: 'Courier New', monospace;
        margin-left: 0.5rem;
    }

    .toc-entry.text-muted .toc-title-entry {
        color: #6c757d;
        font-style: italic;
        font-weight: normal;
    }

    /* Effet hover sur les entrées */
    .toc-entry:hover .toc-title-entry {
        color: #3498db;
        cursor: default;
    }

    /* Responsivité pour mobile */
    @@media (max-width: 768px) {
        .toc-page {
            font-size: 0.8rem;
        }

        .toc-title {
            font-size: 1.1rem;
        }
    }
</style>