@using GenerateurDOE.Models
@using GenerateurDOE.Services.Interfaces
@inject ISectionConteneurService sectionConteneurService
@inject ILoggingService loggingService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService

<div class="section-edit-dialog">
    @if (IsLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (Item != null)
    {
        <div class="alert alert-info mb-3">
            <span class="oi oi-info"></span>
            <strong>Mode personnalisation :</strong> Cette modification affectera <strong>uniquement ce document</strong>.
            La section globale reste inchangée.
        </div>

        @if (Item.EstPersonnalise)
        {
            <div class="alert alert-warning mb-3 d-flex justify-content-between align-items-center">
                <div>
                    <span class="oi oi-warning"></span>
                    <strong>Section personnalisée</strong> - Utilise un contenu spécifique à ce document
                </div>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ResetToDefault" disabled="@IsSaving">
                    <span class="oi oi-reload"></span> Réinitialiser au défaut
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-secondary mb-3">
                <span class="oi oi-document"></span>
                <strong>Section par défaut</strong> - Utilise le contenu de la bibliothèque globale
            </div>
        }

        <EditForm Model="FormModel" OnValidSubmit="SauvegarderPersonnalisation">
            <div class="mb-3">
                <label class="form-label fw-bold">
                    Titre de la section
                    <small class="text-muted fw-normal ms-2">(optionnel)</small>
                </label>
                <InputText @bind-Value="FormModel.TitrePersonnalise"
                          class="form-control"
                          placeholder="@GetPlaceholderTitre()"
                          disabled="@IsSaving" />
                <small class="form-text text-muted">
                    Laisser vide pour utiliser le titre par défaut : <strong>@Item.SectionLibre.Titre</strong>
                </small>
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Contenu de la section</label>
                <div class="mb-2">
                    <small class="text-muted">
                        <span class="oi oi-info"></span>
                        @if (!Item.EstPersonnalise)
                        {
                            <span>Actuellement : contenu par défaut de la bibliothèque</span>
                        }
                        else
                        {
                            <span>Actuellement : contenu personnalisé depuis le @Item.DateModificationPersonnalisation?.ToString("dd/MM/yyyy HH:mm")</span>
                        }
                    </small>
                </div>
                <RichTextEditor @bind-Value="FormModel.ContenuHtmlPersonnalise"
                              Height="500px"
                              Placeholder="Saisissez le contenu personnalisé..." />
            </div>

            <div class="d-flex justify-content-between mt-4">
                <button type="button" class="btn btn-secondary" @onclick="Close" disabled="@IsSaving">
                    <span class="oi oi-x"></span> Annuler
                </button>
                <button type="submit" class="btn btn-primary" disabled="@(IsSaving || string.IsNullOrWhiteSpace(FormModel.ContenuHtmlPersonnalise))">
                    @if (IsSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <span class="oi oi-check"></span> Enregistrer la personnalisation
                </button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="alert alert-danger">
            <span class="oi oi-warning"></span>
            Erreur : Section introuvable
        </div>
    }
</div>

@code {
    [Parameter] public int ItemId { get; set; }

    private SectionConteneurItem? Item { get; set; }
    private EditFormModel FormModel { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool IsSaving { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;

            // Charger l'item avec ses relations
            Item = await sectionConteneurService.GetItemByIdAsync(ItemId);

            if (Item != null)
            {
                // Initialiser le formulaire avec les valeurs actuelles
                FormModel.TitrePersonnalise = Item.TitrePersonnalise ?? string.Empty;
                FormModel.ContenuHtmlPersonnalise = Item.GetContenuEffectif();

                loggingService.LogInformation($"Modal d'édition ouverte pour SectionConteneurItem {ItemId}");
            }
        }
        catch (Exception ex)
        {
            loggingService.LogError($"Erreur lors du chargement de l'item {ItemId}: {ex.Message}");
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Impossible de charger la section : {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task SauvegarderPersonnalisation()
    {
        if (Item == null) return;

        try
        {
            IsSaving = true;
            StateHasChanged();

            // Normaliser le titre (null si vide ou égal au défaut)
            var titrePersonnalise = string.IsNullOrWhiteSpace(FormModel.TitrePersonnalise) ||
                                    FormModel.TitrePersonnalise.Trim() == Item.SectionLibre.Titre
                ? null
                : FormModel.TitrePersonnalise.Trim();

            // Sauvegarder la personnalisation
            var updatedItem = await sectionConteneurService.PersonnaliserItemAsync(
                ItemId,
                titrePersonnalise,
                FormModel.ContenuHtmlPersonnalise
            );

            loggingService.LogInformation($"Section personnalisée avec succès : Item {ItemId}");

            // Fermer le dialog et retourner l'item mis à jour
            DialogService.Close(updatedItem);
        }
        catch (Exception ex)
        {
            loggingService.LogError($"Erreur lors de la sauvegarde de la personnalisation : {ex.Message}");
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                $"Impossible de sauvegarder : {ex.Message}");
        }
        finally
        {
            IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task ResetToDefault()
    {
        if (Item == null) return;

        var confirmed = await DialogService.Confirm(
            "Êtes-vous sûr de vouloir réinitialiser cette section au contenu par défaut ? " +
            "Toutes vos personnalisations seront perdues.",
            "Confirmation de réinitialisation",
            new Radzen.ConfirmOptions
            {
                OkButtonText = "Réinitialiser",
                CancelButtonText = "Annuler"
            }
        );

        if (confirmed == true)
        {
            try
            {
                IsSaving = true;
                StateHasChanged();

                var updatedItem = await sectionConteneurService.ResetItemToDefaultAsync(ItemId);

                loggingService.LogInformation($"Section réinitialisée au défaut : Item {ItemId}");

                NotificationService.Notify(Radzen.NotificationSeverity.Success, "Succès",
                    "Section réinitialisée au contenu par défaut");

                // Fermer le dialog et retourner l'item réinitialisé
                DialogService.Close(updatedItem);
            }
            catch (Exception ex)
            {
                loggingService.LogError($"Erreur lors de la réinitialisation : {ex.Message}");
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Erreur",
                    $"Impossible de réinitialiser : {ex.Message}");
            }
            finally
            {
                IsSaving = false;
                StateHasChanged();
            }
        }
    }

    private void Close()
    {
        // Fermer sans sauvegarder
        DialogService.Close(null);
    }

    private string GetPlaceholderTitre()
    {
        if (Item?.SectionLibre?.Titre != null)
        {
            return $"Défaut : {Item.SectionLibre.Titre}";
        }
        return "Titre par défaut";
    }

    public class EditFormModel
    {
        public string TitrePersonnalise { get; set; } = string.Empty;
        public string ContenuHtmlPersonnalise { get; set; } = string.Empty;
    }
}

<style>
    .section-edit-dialog {
        padding: 0.5rem;
    }

    .section-edit-dialog .alert {
        border-radius: 0.5rem;
    }

    .section-edit-dialog .form-label {
        margin-bottom: 0.5rem;
    }

    .section-edit-dialog .form-control:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
    }
</style>
