# ===================================================================
# Docker Compose Production - G√©n√©rateur DOE v2.1.3
# ===================================================================
# Configuration optimis√©e pour d√©ploiement automatis√© via Portainer
# Image source: GitHub Container Registry (GHCR)
# ===================================================================

version: '3.8'

services:
  # ===================================================================
  # PostgreSQL Database Service
  # ===================================================================
  postgres:
    image: postgres:16-alpine
    container_name: generateur-doe-postgres-prod
    hostname: postgres-prod
    restart: unless-stopped

    labels:
      - "io.portainer.accesscontrol.teams=generateur-doe-team"
      - "traefik.enable=false"
      - "com.docker.compose.project=generateur-doe-production"
      - "com.docker.compose.service=database"
      - "portainer.description=PostgreSQL Database Production - G√©n√©rateur DOE"

    environment:
      POSTGRES_DB: GenerateurDOE_Prod
      POSTGRES_USER: generateur_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-GenerateurDOE2025!}
      PGDATA: /var/lib/postgresql/data
      # PostgreSQL Performance Tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=fr_FR.UTF-8"

    volumes:
      - /data/generateur-doe-data/postgres:/var/lib/postgresql/data
      - /data/generateur-doe-data/backups:/var/backups
      - ./init-scripts:/docker-entrypoint-initdb.d:ro

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U generateur_user -d GenerateurDOE_Prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    network_mode: host

    # Security: Run as custom user
    user: "1001:1001"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===================================================================
  # G√©n√©rateur DOE Application Service - Production
  # ===================================================================
  generateur-doe:
    # üöÄ Image depuis GitHub Container Registry (GHCR)
    image: ghcr.io/zaytar68/generateurdoe:latest
    container_name: generateur-doe-app-prod
    hostname: generateur-doe-prod
    restart: unless-stopped

    labels:
      - "io.portainer.accesscontrol.teams=generateur-doe-team"
      - "traefik.enable=true"
      - "traefik.http.routers.generateur-doe-prod.rule=Host(`generateur-doe.local`)"
      - "traefik.http.services.generateur-doe-prod.loadbalancer.server.port=5000"
      - "com.docker.compose.project=generateur-doe-production"
      - "com.docker.compose.service=application"
      - "portainer.description=Application G√©n√©rateur DOE - Production GHCR"
      - "portainer.logo=https://via.placeholder.com/100x100.png?text=DOE"
      # üîÑ Webhook Portainer pour auto-update
      - "com.centurylinklabs.watchtower.enable=true"

    depends_on:
      postgres:
        condition: service_healthy

    environment:
      # ASP.NET Core Configuration
      ASPNETCORE_ENVIRONMENT: "Production"
      ASPNETCORE_URLS: "http://+:5000"
      DOTNET_RUNNING_IN_CONTAINER: "true"
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: "false"

      # PostgreSQL Connection String
      ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=GenerateurDOE_Prod;Username=generateur_user;Password=${POSTGRES_PASSWORD:-GenerateurDOE2025!};SSL Mode=Prefer;Trust Server Certificate=true;Command Timeout=300;Pooling=true;Min Pool Size=1;Max Pool Size=20;"

      # Application Settings
      AppSettings__RepertoireStockagePDF: "/app/Documents/PDF"
      AppSettings__RepertoireStockageImages: "/app/Documents/Images"
      AppSettings__NomSociete: "Multisols"
      AppSettings__ApplicationVersion: "2.1.3"

      # Database Provider
      DatabaseProvider: "PostgreSQL"

      # Serilog Configuration
      Serilog__WriteTo__0__Args__path: "/app/Logs/app-.log"
      Serilog__MinimumLevel__Default: "Information"
      Serilog__MinimumLevel__Override__Microsoft: "Warning"

      # PuppeteerSharp Configuration
      PUPPETEER_EXECUTABLE_PATH: "/usr/bin/google-chrome-stable"
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"

      # PostgreSQL specific settings
      Npgsql__EnableLegacyTimestampBehavior: "true"

      # Production Optimizations
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
      COMPlus_EnableDiagnostics: "0" # Disable debugging in production

    volumes:
      # Persistent storage
      - /data/generateur-doe-data/documents/pdf:/app/Documents/PDF
      - /data/generateur-doe-data/documents/images:/app/Documents/Images
      - /data/generateur-doe-data/logs:/app/Logs
      - /data/generateur-doe-data/dataprotection-keys:/app/DataProtection-Keys
      - /data/generateur-doe-data/temp:/app/wwwroot/temp

    healthcheck:
      test: curl -f http://localhost:5000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s # Plus de temps pour Puppeteer en production

    network_mode: host

    # Security: Run as non-root user
    user: "1000:1000"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G # Plus de RAM pour Puppeteer
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

      # Rolling update strategy
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first

      # Rollback configuration
      rollback_config:
        parallelism: 1
        delay: 5s

  # ===================================================================
  # pgAdmin for PostgreSQL Management (Production)
  # ===================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: generateur-doe-pgadmin-prod
    hostname: pgadmin-prod
    restart: unless-stopped
    profiles:
      - tools # Activ√© uniquement si besoin: docker compose --profile tools up

    labels:
      - "io.portainer.accesscontrol.teams=generateur-doe-team"
      - "traefik.enable=false"
      - "com.docker.compose.project=generateur-doe-production"
      - "com.docker.compose.service=pgadmin"
      - "portainer.description=pgAdmin4 Production - Gestion PostgreSQL"

    depends_on:
      - postgres

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-cedric.tirolf@multisols.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-GenerateurDOE2025!}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_DISABLE_POSTFIX: 'true'
      PGADMIN_LISTEN_PORT: 8080

    volumes:
      - /data/generateur-doe-data/pgadmin:/var/lib/pgadmin

    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/misc/ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    network_mode: host

    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

# ===================================================================
# Configuration Notes
# ===================================================================
#
# üîê Secrets Management:
# - Les secrets peuvent √™tre d√©finis dans un fichier .env √† la racine
# - Exemple: POSTGRES_PASSWORD=VotreMotDePasseSecurise
#
# üöÄ D√©ploiement:
# - L'image est automatiquement pull depuis GHCR via GitHub Actions
# - Portainer webhook d√©clenche le red√©ploiement automatique
#
# üîÑ Rollback:
# - En cas d'√©chec, rollback automatique vers version pr√©c√©dente
# - Conserver 4 derni√®res versions dans GHCR pour rollback manuel
#
# üìä Monitoring:
# - Health checks sur tous les services
# - Logs centralis√©s dans /data/generateur-doe-data/logs
#
# üéØ Activation pgAdmin:
# - docker compose --profile tools up -d
#
# ===================================================================
