# ===================================================================
# Docker Compose PostgreSQL - Générateur DOE v2.1.3
# ===================================================================
# Orchestration complète : Application + PostgreSQL + Volumes persistants
# ===================================================================

version: '3.8'

services:
  # ===================================================================
  # PostgreSQL Database Service
  # ===================================================================
  postgres:
    image: postgres:16-alpine
    container_name: generateur-doe-postgres
    hostname: postgres
    restart: unless-stopped

    labels:
      - "io.portainer.accesscontrol.teams=generateur-doe-team"
      - "traefik.enable=false"
      - "com.docker.compose.project=generateur-doe-postgresql"
      - "com.docker.compose.service=database"
      - "portainer.description=PostgreSQL Database pour Générateur DOE"

    environment:
      POSTGRES_DB: GenerateurDOE_Prod
      POSTGRES_USER: generateur_user
      POSTGRES_PASSWORD: GenerateurDOE2025!
      PGDATA: /var/lib/postgresql/data

    volumes:
      - /data/generateur-doe-data/postgres:/var/lib/postgresql/data
      - /data/generateur-doe-data/backups:/var/backups
      - ./init-scripts:/docker-entrypoint-initdb.d

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U generateur_user -d GenerateurDOE_Prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    network_mode: host

    # Security: Run as custom user to avoid systemd-journal conflict
    user: "1001:1001"

    # Resource limits for PostgreSQL
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ===================================================================
  # Générateur DOE Application Service
  # ===================================================================
  generateur-doe:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: generateur-doe:2.1.3
    container_name: generateur-doe-app
    hostname: generateur-doe
    restart: unless-stopped

    labels:
      - "io.portainer.accesscontrol.teams=generateur-doe-team"
      - "traefik.enable=true"
      - "traefik.http.routers.generateur-doe-pg.rule=Host(`generateur-doe.local`)"
      - "traefik.http.services.generateur-doe-pg.loadbalancer.server.port=80"
      - "com.docker.compose.project=generateur-doe-postgresql"
      - "com.docker.compose.service=application"
      - "portainer.description=Application Générateur DOE - PostgreSQL Backend"
      - "portainer.logo=https://via.placeholder.com/100x100.png?text=DOE"

    depends_on:
      - postgres

    environment:
      # ASP.NET Core Configuration
      ASPNETCORE_ENVIRONMENT: "Production"
      ASPNETCORE_URLS: "http://+:5000"
      DOTNET_RUNNING_IN_CONTAINER: "true"

      # PostgreSQL Connection String
      ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=GenerateurDOE_Prod;Username=generateur_user;Password=GenerateurDOE2025!;SSL Mode=Prefer;Trust Server Certificate=true;Command Timeout=300;"

      # Application Settings
      AppSettings__RepertoireStockagePDF: "/app/Documents/PDF"
      AppSettings__RepertoireStockageImages: "/app/Documents/Images"
      AppSettings__NomSociete: "Multisols"
      AppSettings__ApplicationVersion: "2.1.3"

      # Database Provider
      DatabaseProvider: "PostgreSQL"

      # Serilog Configuration
      Serilog__WriteTo__0__Args__path: "/app/Logs/app-.log"
      Serilog__MinimumLevel__Default: "Information"

      # PuppeteerSharp Configuration
      PUPPETEER_EXECUTABLE_PATH: "/usr/bin/google-chrome-stable"
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"

      # PostgreSQL specific settings
      Npgsql__EnableLegacyTimestampBehavior: "true"

    volumes:
      # Persistent storage for documents and logs
      - /data/generateur-doe-data/documents/pdf:/app/Documents/PDF
      - /data/generateur-doe-data/documents/images:/app/Documents/Images
      - /data/generateur-doe-data/logs:/app/Logs
      - /data/generateur-doe-data/dataprotection-keys:/app/DataProtection-Keys
      - /data/generateur-doe-data/temp:/app/wwwroot/temp

    healthcheck:
      test: curl -f http://localhost:5000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

    network_mode: host

    # Security: Run as non-root user
    user: "1000:1000"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===================================================================
  # pgAdmin for PostgreSQL Management
  # ===================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: generateur-doe-pgadmin
    hostname: pgadmin
    restart: unless-stopped

    labels:
      - "io.portainer.accesscontrol.teams=generateur-doe-team"
      - "traefik.enable=false"
      - "com.docker.compose.project=generateur-doe-postgresql"
      - "com.docker.compose.service=pgadmin"
      - "portainer.description=pgAdmin4 - Gestion PostgreSQL pour Générateur DOE"

    depends_on:
      - postgres

    environment:
      PGADMIN_DEFAULT_EMAIL: cedric.tirolf@multisols.com
      PGADMIN_DEFAULT_PASSWORD: GenerateurDOE2025!
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_DISABLE_POSTFIX: 'true'
      PGADMIN_LISTEN_PORT: 8080

    volumes:
      - /data/generateur-doe-data/pgadmin:/var/lib/pgadmin

    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/misc/ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    network_mode: host

    # Resource limits for pgAdmin
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ===================================================================
  # Optional: Monitoring with Portainer
  # ===================================================================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: generateur-doe-portainer
    restart: unless-stopped

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/generateur-doe-data/portainer:/data

    network_mode: host

    profiles:
      - "with-monitoring"

# ===================================================================
# Host Bind Mounts - Data stored in /data/generateur-doe-data/
# ===================================================================
# All data is now stored directly on the host filesystem
# No Docker volumes needed - direct access for backups and maintenance

# ===================================================================
# Network Configuration
# ===================================================================
# Using host network mode - no custom networks needed